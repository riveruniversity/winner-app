{"version":3,"file":"index-Dy02l2rI.js","sources":["../../src/js/modules/firebase-init.js","../../src/js/modules/firestore-service.js","../../src/js/modules/ui.js","../../src/js/modules/settings.js","../../src/js/modules/lists.js","../../src/js/modules/prizes.js","../../src/js/modules/winners.js","../../src/js/modules/animations.js","../../src/js/modules/selection.js","../../src/js/modules/csv-parser.js","../../src/js/modules/export.js","../../src/js/app.js","../../src/main.js"],"sourcesContent":["// Import the functions you need from the SDKs\nimport { initializeApp } from \"https://www.gstatic.com/firebasejs/12.0.0/firebase-app.js\";\nimport { getFirestore, enableIndexedDbPersistence } from \"https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js\";\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: import.meta.env.VITE_FIREBASE_AUTH_DOMAIN,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: import.meta.env.VITE_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: import.meta.env.VITE_FIREBASE_MESSAGING_SENDER_ID,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\n// Enable offline persistence. This is the magic that makes it work offline!\nenableIndexedDbPersistence(db)\n  .catch((err) => {\n    if (err.code == 'failed-precondition') {\n      console.warn('Firestore persistence failed: likely due to multiple tabs open.');\n    } else if (err.code == 'unimplemented') {\n      console.warn('Firestore persistence is not available in this browser.');\n    }\n  });\n\n// Export the db instance to be used by other modules\nexport { db };","// ================================\n// FIRESTORE SERVICE\n// ================================\n\nimport { db } from './firebase-init.js';\nimport { \n  collection, \n  doc, \n  getDocs, \n  getDoc, \n  setDoc, \n  deleteDoc, \n  query, \n  where,\n  orderBy,\n  onSnapshot,\n  getDocsFromCache,\n  getDocFromCache,\n  writeBatch\n} from \"https://www.gstatic.com/firebasejs/12.0.0/firebase-firestore.js\";\n\n// Collection names matching current schema\nconst COLLECTIONS = {\n  lists: 'lists',\n  winners: 'winners', \n  prizes: 'prizes',\n  history: 'history',\n  settings: 'settings'\n};\n\n// Get key field for each collection (matches current schema)\nfunction getKeyField(collectionName) {\n  const keyFields = {\n    lists: 'listId',\n    winners: 'winnerId', \n    prizes: 'prizeId',\n    history: 'historyId',\n    settings: 'key'\n  };\n  return keyFields[collectionName] || 'id';\n}\n\n// Save document to collection (true local-first: returns immediately after local save)\nasync function saveToStore(collectionName, data, options = {}) {\n  try {\n    const keyField = getKeyField(collectionName);\n    const docId = data[keyField];\n    \n    if (!docId) {\n      throw new Error(`Document must have a '${keyField}' field`);\n    }\n    \n    // Special handling for lists that might need sharding\n    if (collectionName === 'lists' && data.entries && data.entries.length > 1000) {\n      console.log(`üì¶ Large list detected (${data.entries.length} entries), using sharding strategy`);\n      return await handleLargeListSharding(data, options.onProgress);\n    }\n    \n    // TRUE local-first approach: fire and forget\n    console.log(`üíæ Saving ${collectionName}/${docId} locally (immediate return)...`);\n    \n    const docRef = doc(db, collectionName, docId);\n    \n    // Save in background - don't await this!\n    setDoc(docRef, data, { merge: false }).then(() => {\n      console.log(`üîÑ ${collectionName}/${docId} synced to server in background`);\n    }).catch(error => {\n      console.warn(`‚ö†Ô∏è Background sync failed for ${collectionName}/${docId}:`, error);\n      // Could implement retry logic here\n    });\n    \n    console.log(`‚úÖ ${collectionName}/${docId} save initiated - returning immediately`);\n    \n    // Return immediately without waiting for network\n    return docId;\n    \n  } catch (error) {\n    console.error(`Error initiating save for ${collectionName}:`, error);\n    throw error;\n  }\n}\n\n\n// Internal function: Handle large list sharding\nasync function handleLargeListSharding(listData, onProgress = null) {\n  const entries = listData.entries;\n  const maxEntriesPerShard = 1000; // Keep each shard under 1MB\n  \n  // This function is only called for large lists, so proceed with sharding\n  \n  // Large list - needs sharding\n  console.log(`üì¶ Large list detected (${entries.length} entries), splitting into shards...`);\n  \n  const baseListId = listData.listId;\n  const totalShards = Math.ceil(entries.length / maxEntriesPerShard);\n  const shardIds = [];\n  \n  // Create ALL shard documents (including shard-0 for the first chunk)\n  for (let shardIndex = 0; shardIndex < totalShards; shardIndex++) {\n    const startIndex = shardIndex * maxEntriesPerShard;\n    const endIndex = Math.min(startIndex + maxEntriesPerShard, entries.length);\n    const shardEntries = entries.slice(startIndex, endIndex);\n    \n    const shardId = `${baseListId}-shard-${shardIndex}`;\n    const shardData = {\n      listId: shardId,\n      parentListId: baseListId,\n      shardIndex: shardIndex,\n      metadata: {\n        ...listData.metadata,\n        listId: shardId,\n        parentListId: baseListId,\n        isListShard: true,\n        shardIndex: shardIndex,\n        entriesInShard: shardEntries.length\n      },\n      entries: shardEntries\n    };\n    \n    const docRef = doc(db, 'lists', shardId);\n    \n    // Fire and forget for shards\n    setDoc(docRef, shardData, { merge: false }).catch(error => {\n      console.warn(`‚ö†Ô∏è Shard ${shardId} sync failed:`, error);\n    });\n    shardIds.push(shardId);\n    \n    if (onProgress) {\n      const progress = ((shardIndex + 1) / totalShards) * 90; // Leave 10% for main doc\n      onProgress(progress, `Saved shard ${shardIndex + 1}/${totalShards} (${shardEntries.length} entries)`);\n    }\n    \n    // Yield to UI thread\n    await new Promise(resolve => setTimeout(resolve, 0));\n  }\n  \n  // Create main list document (metadata ONLY - no entries)\n  const mainListData = {\n    ...listData,\n    entries: [], // ALWAYS empty for sharded lists\n    isSharded: true,\n    totalShards: totalShards,\n    totalEntries: entries.length,\n    shardIds: shardIds // References to all shards (shard-0, shard-1, etc.)\n  };\n  \n  const mainDocRef = doc(db, 'lists', baseListId);\n  \n  // Fire and forget for main document\n  setDoc(mainDocRef, mainListData, { merge: false }).catch(error => {\n    console.warn(`‚ö†Ô∏è Main list ${baseListId} sync failed:`, error);\n  });\n  \n  if (onProgress) {\n    onProgress(100, `Complete! Saved ${entries.length} entries across ${totalShards} shards`);\n  }\n  \n  console.log(`‚úÖ Large list saved: ${totalShards} shards (shard-0 to shard-${totalShards-1}), ${entries.length} total entries`);\n  return baseListId;\n}\n\n// Get all entries from a potentially sharded list\nasync function getListWithShards(listId) {\n  try {\n    // Call Firestore directly to avoid recursion\n    const docRef = doc(db, 'lists', listId);\n    const docSnap = await getDoc(docRef);\n    \n    if (!docSnap.exists()) return null;\n    \n    const mainList = docSnap.data();\n    \n    // If not sharded, return as-is\n    if (!mainList.isSharded) {\n      return mainList;\n    }\n    \n    // Load all shards\n    console.log(`üì¶ Loading sharded list: ${mainList.totalShards} shards`);\n    const allEntries = [];\n    \n    for (const shardId of mainList.shardIds) {\n      // Also call Firestore directly for shards to avoid recursion\n      const shardDocRef = doc(db, 'lists', shardId);\n      const shardSnap = await getDoc(shardDocRef);\n      \n      if (shardSnap.exists()) {\n        const shard = shardSnap.data();\n        if (shard && shard.entries) {\n          allEntries.push(...shard.entries);\n        }\n      }\n    }\n    \n    // Return reconstructed list\n    return {\n      ...mainList,\n      entries: allEntries,\n      metadata: {\n        ...mainList.metadata,\n        reconstructed: true\n      }\n    };\n  } catch (error) {\n    console.error(`Error loading sharded list ${listId}:`, error);\n    throw error;\n  }\n}\n\n// Universal get function - handles single docs, all docs, and sharded lists automatically\nasync function getFromStore(collectionName, key = null) {\n  try {\n    // If key provided, get single document\n    if (key) {\n      // Special handling for lists - check if it's sharded\n      if (collectionName === 'lists') {\n        return await getListWithShards(key);\n      }\n      \n      // Standard single document retrieval\n      const docRef = doc(db, collectionName, key);\n      const docSnap = await getDoc(docRef);\n      \n      if (docSnap.exists()) {\n        return docSnap.data();\n      }\n      return null;\n    }\n    \n    // If no key provided, get all documents (cache-first approach)\n    try {\n      // First try to get from cache for instant loading\n      const cacheSnapshot = await getDocsFromCache(collection(db, collectionName));\n      const cacheResults = [];\n      \n      cacheSnapshot.forEach((doc) => {\n        cacheResults.push(doc.data());\n      });\n      \n      // If we have cache data, process it\n      if (cacheResults.length > 0) {\n        console.log(`üì¶ Loaded ${cacheResults.length} ${collectionName} from cache`);\n        \n        // Then fetch from server in background to sync latest data\n        getDocs(collection(db, collectionName)).then(serverSnapshot => {\n          console.log(`üîÑ Background sync complete for ${collectionName}`);\n        }).catch(err => {\n          console.warn(`Background sync failed for ${collectionName}:`, err);\n        });\n        \n        // For lists, reconstruct sharded documents\n        if (collectionName === 'lists') {\n          return await reconstructShardedLists(cacheResults);\n        }\n        \n        return cacheResults;\n      }\n    } catch (cacheError) {\n      console.log(`üì° No cache data for ${collectionName}, fetching from server...`);\n    }\n    \n    // If no cache data, fetch from server\n    const querySnapshot = await getDocs(collection(db, collectionName));\n    const results = [];\n    \n    querySnapshot.forEach((doc) => {\n      results.push(doc.data());\n    });\n    \n    console.log(`üì° Loaded ${results.length} ${collectionName} from server`);\n    \n    // For lists, reconstruct sharded documents\n    if (collectionName === 'lists') {\n      return await reconstructShardedLists(results);\n    }\n    \n    return results;\n    \n  } catch (error) {\n    console.error(`Error getting from ${collectionName}:`, error);\n    throw error;\n  }\n}\n\n\n// Helper function to reconstruct sharded lists from raw documents\nasync function reconstructShardedLists(rawDocuments) {\n  const reconstructedLists = [];\n  const processedIds = new Set();\n  \n  for (const doc of rawDocuments) {\n    // Skip if already processed or if it's a shard (not main document)\n    if (processedIds.has(doc.listId) || doc.metadata?.isListShard) {\n      continue;\n    }\n    \n    if (doc.isSharded) {\n      // This is a sharded list - reconstruct it\n      console.log(`üîß Reconstructing sharded list ${doc.listId} with ${doc.totalShards} shards`);\n      \n      const allEntries = [];\n      for (const shardId of doc.shardIds || []) {\n        // Find the shard in our raw documents or fetch it\n        let shard = rawDocuments.find(d => d.listId === shardId);\n        if (!shard) {\n          // Try cache first for missing shard\n          try {\n            const docRef = doc(db, 'lists', shardId);\n            const cachedSnap = await getDocFromCache(docRef);\n            if (cachedSnap.exists()) {\n              shard = cachedSnap.data();\n              \n              // Background sync for this shard (fire and forget)\n              getDoc(docRef).then(() => {\n                console.log(`üîÑ Background sync complete for shard ${shardId}`);\n              }).catch(err => {\n                console.warn(`Background sync failed for shard ${shardId}:`, err);\n              });\n            }\n          } catch (cacheError) {\n            // If cache fails, fetch from server as last resort\n            console.log(`üì° Cache miss for shard ${shardId}, fetching from server...`);\n            const docRef = doc(db, 'lists', shardId);\n            const docSnap = await getDoc(docRef);\n            if (docSnap.exists()) {\n              shard = docSnap.data();\n            }\n          }\n        }\n        \n        if (shard && shard.entries) {\n          allEntries.push(...shard.entries);\n        }\n      }\n      \n      // Return reconstructed list\n      reconstructedLists.push({\n        ...doc,\n        entries: allEntries,\n        metadata: {\n          ...doc.metadata,\n          reconstructed: true,\n          originalShardCount: doc.totalShards\n        }\n      });\n    } else {\n      // Regular list - add as-is\n      reconstructedLists.push(doc);\n    }\n    \n    processedIds.add(doc.listId);\n  }\n  \n  console.log(`üìã Processed ${reconstructedLists.length} lists (${rawDocuments.length} raw documents)`);\n  return reconstructedLists;\n}\n\n// Delete document from collection (fire-and-forget for local-first performance)\nfunction deleteFromStore(collectionName, key) {\n  try {\n    console.log(`üóëÔ∏è Deleting ${collectionName}/${key} (fire-and-forget)...`);\n    \n    const docRef = doc(db, collectionName, key);\n    \n    // Fire and forget - don't await this!\n    deleteDoc(docRef).then(() => {\n      console.log(`‚úÖ ${collectionName}/${key} deleted from server`);\n    }).catch(error => {\n      console.warn(`‚ö†Ô∏è Background delete failed for ${collectionName}/${key}:`, error);\n      // Could implement retry logic here\n    });\n    \n    // Return immediately\n    return key;\n    \n  } catch (error) {\n    console.error(`Error initiating delete for ${collectionName}:`, error);\n    throw error;\n  }\n}\n\n// Get all documents with cache-first + real-time updates\nfunction getAllFromStoreWithUpdates(collectionName, callback) {\n  // First load from cache immediately\n  getAllFromStore(collectionName).then(cacheData => {\n    callback(cacheData, 'cache');\n  }).catch(err => {\n    console.error('Error loading cache data:', err);\n  });\n  \n  // Then set up real-time listener for updates\n  const collRef = collection(db, collectionName);\n  return onSnapshot(collRef, (snapshot) => {\n    const items = [];\n    snapshot.forEach((doc) => {\n      items.push(doc.data());\n    });\n    \n    // Only call callback if data actually changed\n    callback(items, 'server');\n    console.log(`üîÑ Real-time update for ${collectionName}: ${items.length} items`);\n  }, (error) => {\n    console.error(`Error listening to ${collectionName}:`, error);\n  });\n}\n\n// Listen to collection changes (for real-time updates)\nfunction listenToCollection(collectionName, callback) {\n  const collRef = collection(db, collectionName);\n  \n  return onSnapshot(collRef, (snapshot) => {\n    const items = [];\n    snapshot.forEach((doc) => {\n      items.push(doc.data());\n    });\n    callback(items);\n  }, (error) => {\n    console.error(`Error listening to ${collectionName}:`, error);\n  });\n}\n\n// Query documents with filters\nasync function queryStore(collectionName, filters = []) {\n  try {\n    let q = collection(db, collectionName);\n    \n    // Apply filters\n    for (const filter of filters) {\n      if (filter.type === 'where') {\n        q = query(q, where(filter.field, filter.operator, filter.value));\n      } else if (filter.type === 'orderBy') {\n        q = query(q, orderBy(filter.field, filter.direction || 'asc'));\n      }\n    }\n    \n    const querySnapshot = await getDocs(q);\n    const results = [];\n    \n    querySnapshot.forEach((doc) => {\n      results.push(doc.data());\n    });\n    \n    return results;\n  } catch (error) {\n    console.error(`Error querying ${collectionName}:`, error);\n    throw error;\n  }\n}\n\n// Migration helper: Copy data from IndexedDB to Firestore\nasync function migrateFromIndexedDB() {\n  // This will be called only if needed during transition\n  console.log('Migration helper available if needed');\n}\n\n// Export the clean API - only the essentials\nexport const Database = {\n  saveToStore,     // Handles everything: local-first, sharding, fire-and-forget\n  getFromStore,    // Universal: single docs, all docs, sharded lists - handles everything\n  deleteFromStore, // Fire-and-forget deletes\n  listenToCollection, // Real-time updates\n  queryStore,      // Advanced queries\n  initDB: () => Promise.resolve(db) // Firebase initialization\n};\n\n// Export only the core functions for direct use\nexport {\n  saveToStore,\n  getFromStore,\n  deleteFromStore,\n  listenToCollection,\n  queryStore,\n  COLLECTIONS\n};\n\nwindow.Database = Database;","// ================================\n// UI UTILITIES & MODALS\n// ================================\n\n// ================================\n// UI UTILITIES & MODALS\n// ================================\n\nimport { Database } from './firestore-service.js';\nimport { settings } from './settings.js'; // Import settings directly\n\nfunction generateId(length = 10) {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  let result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars.charAt(Math.floor(Math.random() * chars.length));\n  }\n  return result;\n}\n\nfunction showToast(message, type = 'info') {\n  const backgroundColor = {\n    success: '#10b981',\n    error: '#ef4444',\n    warning: '#f59e0b',\n    info: '#06b6d4'\n  };\n\n  Toastify({\n    text: message,\n    duration: 3000,\n    gravity: 'bottom',\n    position: 'right',\n    style: {\n      background: backgroundColor[type] || backgroundColor.info,\n    }\n  }).showToast();\n}\n\nfunction showProgress(title, text) {\n  document.getElementById('progressTitle').textContent = title;\n  document.getElementById('progressText').textContent = text;\n  document.getElementById('progressFill').style.width = '0%';\n  document.getElementById('progressOverlay').classList.remove('d-none');\n}\n\nfunction updateProgress(percentage, text) {\n  document.getElementById('progressFill').style.width = percentage + '%';\n  if (text) {\n    document.getElementById('progressText').textContent = text;\n  }\n}\n\nfunction hideProgress() {\n  document.getElementById('progressOverlay').classList.add('d-none');\n}\n\nfunction showConfirmationModal(title, message, onConfirm) {\n  const modalTitle = document.getElementById('appModalLabel');\n  const modalBody = document.getElementById('appModalBody');\n  const confirmBtn = document.getElementById('appModalConfirmBtn');\n  const cancelBtn = document.querySelector('#appModal .modal-footer .btn-secondary');\n\n  modalTitle.textContent = title;\n  modalBody.innerHTML = `<p>${message}</p>`;\n  confirmBtn.textContent = 'Confirm';\n  confirmBtn.className = 'btn btn-danger';\n  confirmBtn.style.display = 'inline-block';\n  cancelBtn.textContent = 'Cancel';\n\n  const newConfirmBtn = confirmBtn.cloneNode(true);\n  confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);\n\n  newConfirmBtn.addEventListener('click', async () => {\n    try {\n      await onConfirm();\n    } catch (error) {\n      console.error(`Error in confirmation modal for \"${title}\":`, error);\n      showToast(`Operation failed: ${error.message}`, 'error');\n    } finally {\n      window.appModal.hide();\n    }\n  }, { once: true });\n\n  window.appModal.show();\n}\n\nfunction readFileAsText(file) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = e => resolve(e.target.result);\n    reader.onerror = e => reject(new Error('Failed to read file'));\n    reader.readAsText(file);\n  });\n}\n\nasync function populateQuickSelects(lists = null, prizes = null) {\n  try {\n    // Use passed data if available, otherwise fetch from database\n    const listsData = lists || await Database.getFromStore('lists');\n    const prizesData = prizes || await Database.getFromStore('prizes');\n\n    const quickListSelect = document.getElementById('quickListSelect');\n    const quickPrizeSelect = document.getElementById('quickPrizeSelect');\n    const quickWinnersCount = document.getElementById('quickWinnersCount');\n\n    if (quickListSelect) {\n      quickListSelect.innerHTML = '<option value=\"\">Select List...</option>';\n      listsData.forEach(list => {\n        const listId = list.listId || list.metadata.listId;\n        const option = document.createElement('option');\n        option.value = listId;\n        option.textContent = `${list.metadata.name} (${list.entries.length})`;\n        quickListSelect.appendChild(option);\n      });\n      \n      if (settings.selectedListId) {\n        quickListSelect.value = settings.selectedListId;\n      }\n    }\n\n    if (quickPrizeSelect) {\n      quickPrizeSelect.innerHTML = '<option value=\"\">Select Prize...</option>';\n      prizesData.filter(prize => prize.quantity > 0).forEach(prize => {\n        const option = document.createElement('option');\n        option.value = prize.prizeId;\n        option.textContent = `${prize.name} (${prize.quantity} available)`;\n        quickPrizeSelect.appendChild(option);\n      });\n      \n      if (settings.selectedPrizeId) {\n        quickPrizeSelect.value = settings.selectedPrizeId;\n      }\n    }\n\n    if (quickWinnersCount && settings.winnersCount) {\n      quickWinnersCount.value = settings.winnersCount;\n    }\n\n    updateSelectionInfo();\n  } catch (error) {\n    console.error('Error populating quick selects:', error);\n    showToast('Error loading selection options: ' + error.message, 'error');\n  }\n}\n\nfunction applyVisibilitySettings() {\n  const totalEntriesCard = document.getElementById('totalEntriesCard');\n  if (totalEntriesCard) {\n    totalEntriesCard.style.display = settings.hideEntryCounts ? 'none' : 'block';\n  }\n}\n\nasync function syncUI(lists = null, prizes = null) {\n  try {\n    await populateQuickSelects(lists, prizes);\n    applyVisibilitySettings();\n    updateSelectionInfo();\n  } catch (error) {\n    console.error('Error syncing UI:', error);\n    showToast('Failed to refresh the application interface.', 'error');\n  }\n}\n\nfunction updateSelectionInfo() {\n  const quickListSelect = document.getElementById('quickListSelect');\n  const quickPrizeSelect = document.getElementById('quickPrizeSelect');\n  const quickWinnersCount = document.getElementById('quickWinnersCount');\n\n  if (!quickListSelect || !quickPrizeSelect || !quickWinnersCount) return;\n\n  const listOption = quickListSelect.options[quickListSelect.selectedIndex];\n  const prizeOption = quickPrizeSelect.options[quickPrizeSelect.selectedIndex];\n\n  const listText = listOption ? listOption.textContent.split(' (')[0] : 'Not Selected';\n  const prizeText = prizeOption ? prizeOption.textContent.split(' (')[0] : 'Not Selected';\n\n  document.getElementById('currentListDisplay').textContent = listText;\n  document.getElementById('currentPrizeDisplay').textContent = prizeText;\n  document.getElementById('winnersCountDisplay').textContent = quickWinnersCount.value;\n\n  // Auto-save selections to settings\n  settings.selectedListId = quickListSelect.value;\n  settings.selectedPrizeId = quickPrizeSelect.value;\n  settings.winnersCount = parseInt(quickWinnersCount.value) || 1;\n\n  // Update total entries when list changes\n  if (quickListSelect.value) {\n    updateTotalEntries();\n  } else {\n    document.getElementById('totalEntriesDisplay').textContent = '0';\n  }\n\n  // Enable play button only if list and prize are selected\n  const bigPlayButton = document.getElementById('bigPlayButton');\n  if (bigPlayButton) {\n    bigPlayButton.disabled = !quickListSelect.value || !quickPrizeSelect.value;\n  }\n}\n\nasync function updateTotalEntries() {\n  try {\n    const quickListSelect = document.getElementById('quickListSelect');\n    const listId = quickListSelect.value;\n    if (listId) {\n      const list = await Database.getFromStore('lists', listId);\n      if (list) {\n        document.getElementById('totalEntriesDisplay').textContent = list.entries.length;\n        // Update currentList for later use\n        // This will be handled by app.js or a central state management\n      }\n    }\n  } catch (error) {\n    console.error('Error updating total entries:', error);\n  }\n}\n\nexport const UI = {\n  generateId,\n  showToast,\n  showProgress,\n  updateProgress,\n  hideProgress,\n  showConfirmationModal,\n  readFileAsText,\n  populateQuickSelects,\n  applyVisibilitySettings,\n  syncUI,\n  updateSelectionInfo,\n  updateTotalEntries\n};\n\nwindow.UI = UI;\n","// ================================\n// SETTINGS & THEMES\n// ================================\n\nimport { Database } from './firestore-service.js';\nimport { UI } from './ui.js';\n\n// Application settings with defaults\nexport let settings = {\n  preventDuplicates: false,\n  enableSoundEffects: false,\n  hideEntryCounts: false,\n  fontFamily: 'Open Sans',\n  primaryColor: '#6366f1',\n  secondaryColor: '#8b5cf6',\n  backgroundType: 'gradient',\n  customBackgroundImage: null,\n  selectedListId: '',\n  selectedPrizeId: '',\n  winnersCount: 1\n};\n\nasync function saveSettings() {\n  for (const [key, value] of Object.entries(settings)) {\n    const settingToSave = { key, value };\n    await Database.saveToStore('settings', settingToSave);\n  }\n}\n\nasync function loadSettings() {\n  try {\n    const savedSettings = await Database.getFromStore('settings');\n    for (const setting of savedSettings) {\n      if (settings.hasOwnProperty(setting.key)) {\n        settings[setting.key] = setting.value;\n      }\n    }\n  } catch (error) {\n    console.warn('Could not load settings:', error);\n  }\n}\n\nasync function handleSaveSettings() {\n  try {\n    const settingsForm = {\n      preventDuplicates: document.getElementById('preventDuplicates')?.checked || settings.preventDuplicates,\n      enableSoundEffects: document.getElementById('enableSoundEffects')?.checked || settings.enableSoundEffects,\n      hideEntryCounts: document.getElementById('hideEntryCounts')?.checked || settings.hideEntryCounts,\n      fontFamily: document.getElementById('fontFamily')?.value || settings.fontFamily,\n      primaryColor: document.getElementById('primaryColor')?.value || settings.primaryColor,\n      secondaryColor: document.getElementById('secondaryColor')?.value || settings.secondaryColor,\n      backgroundType: document.getElementById('backgroundType')?.value || settings.backgroundType\n    };\n\n    const selectionState = {\n      selectedListId: document.getElementById('quickListSelect')?.value || settings.selectedListId,\n      selectedPrizeId: document.getElementById('quickPrizeSelect')?.value || settings.selectedPrizeId,\n      winnersCount: parseInt(document.getElementById('quickWinnersCount')?.value) || settings.winnersCount\n    };\n\n    Object.assign(settings, settingsForm, selectionState);\n    await saveSettings();\n    applyTheme();\n    await UI.populateQuickSelects();\n    UI.applyVisibilitySettings();\n\n    UI.showToast('Settings saved successfully', 'success');\n  } catch (error) {\n    console.error('Error saving settings:', error);\n    UI.showToast('Error saving settings: ' + error.message, 'error');\n  }\n}\n\nfunction setupTheme() {\n  applyTheme();\n  loadSettingsToForm();\n}\n\nfunction applyTheme() {\n  const root = document.documentElement;\n  root.style.setProperty('--primary-color', settings.primaryColor);\n  root.style.setProperty('--secondary-color', settings.secondaryColor);\n  root.style.setProperty('--font-family', settings.fontFamily);\n\n  const gradient = `linear-gradient(135deg, ${settings.primaryColor} 0%, ${settings.secondaryColor} 100%)`;\n  root.style.setProperty('--gradient-bg', gradient);\n  document.body.style.fontFamily = `'${settings.fontFamily}', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif`;\n}\n\nfunction loadSettingsToForm() {\n  const settingsFields = {\n    'preventDuplicates': settings.preventDuplicates,\n    'enableSoundEffects': settings.enableSoundEffects,\n    'hideEntryCounts': settings.hideEntryCounts,\n    'fontFamily': settings.fontFamily,\n    'primaryColor': settings.primaryColor,\n    'secondaryColor': settings.secondaryColor,\n    'backgroundType': settings.backgroundType\n  };\n\n  for (const [fieldId, value] of Object.entries(settingsFields)) {\n    const element = document.getElementById(fieldId);\n    if (element) {\n      if (element.type === 'checkbox') {\n        element.checked = value;\n      } else {\n        element.value = value;\n      }\n    }\n  }\n\n  const quickListSelect = document.getElementById('quickListSelect');\n  const quickPrizeSelect = document.getElementById('quickPrizeSelect');\n  const quickWinnersCount = document.getElementById('quickWinnersCount');\n\n  if (quickListSelect && settings.selectedListId) {\n    quickListSelect.value = settings.selectedListId;\n  }\n  if (quickPrizeSelect && settings.selectedPrizeId) {\n    quickPrizeSelect.value = settings.selectedPrizeId;\n  }\n  if (quickWinnersCount && settings.winnersCount) {\n    quickWinnersCount.value = settings.winnersCount;\n  }\n}\n\nfunction toggleTheme() {\n  const body = document.body;\n  const themeToggle = document.getElementById('themeToggle');\n  const currentTheme = body.getAttribute('data-theme');\n\n  if (currentTheme === 'dark') {\n    body.setAttribute('data-theme', 'light');\n    themeToggle.innerHTML = '<i class=\"bi bi-moon-fill\"></i>';\n  } else {\n    body.setAttribute('data-theme', 'dark');\n    themeToggle.innerHTML = '<i class=\"bi bi-sun-fill\"></i>';\n  }\n}\n\nfunction handleThemePreset(event) {\n  const theme = event.currentTarget.getAttribute('data-theme');\n  \n  const themeConfigs = {\n    default: { primaryColor: '#6366f1', secondaryColor: '#8b5cf6', fontFamily: 'Inter' },\n    emerald: { primaryColor: '#10b981', secondaryColor: '#06d6a0', fontFamily: 'Inter' },\n    ruby: { primaryColor: '#ef4444', secondaryColor: '#f87171', fontFamily: 'Poppins' },\n    gold: { primaryColor: '#f59e0b', secondaryColor: '#fbbf24', fontFamily: 'Poppins' },\n    ocean: { primaryColor: '#0ea5e9', secondaryColor: '#06b6d4', fontFamily: 'Open Sans' },\n    corporate: { primaryColor: '#374151', secondaryColor: '#6b7280', fontFamily: 'Roboto' }\n  };\n\n  const config = themeConfigs[theme];\n  if (!config) return;\n\n  settings.primaryColor = config.primaryColor;\n  settings.secondaryColor = config.secondaryColor;\n  settings.fontFamily = config.fontFamily;\n\n  applyTheme();\n  loadSettingsToForm();\n  saveSettings();\n\n  UI.showToast(`Applied ${theme.charAt(0).toUpperCase() + theme.slice(1)} theme`, 'success');\n}\n\nexport const Settings = {\n  saveSettings,\n  loadSettings,\n  handleSaveSettings,\n  setupTheme,\n  applyTheme,\n  loadSettingsToForm,\n  toggleTheme,\n  handleThemePreset,\n  updateSettings: function(newSettings) { Object.assign(settings, newSettings); } // Added for external updates\n};\n\nwindow.Settings = Settings;\n","// ================================\n// LISTS MANAGEMENT\n// ================================\n\n// 1. Import dependencies\nimport { Database } from './firestore-service.js';\nimport { UI } from './ui.js';\n\n// 2. Define functions as standalone, not inside a closure\n// Cache-first loading with real-time updates\nfunction loadLists() {\n  const container = document.getElementById('listsContainer');\n  if (!container) return;\n\n  // Show loading state\n  container.innerHTML = '<p class=\"text-muted\">üì¶ Loading lists...</p>';\n\n  // Use cache-first approach with real-time updates\n  return Database.getAllFromStoreWithUpdates('lists', (lists, source) => {\n    try {\n      // Update loading message based on source\n      if (source === 'cache' && lists.length > 0) {\n        console.log('üì¶ Lists loaded from cache');\n      } else if (source === 'server') {\n        console.log('üîÑ Lists updated from server');\n      }\n\n      if (lists.length === 0) {\n        container.innerHTML = '<p class=\"text-muted\">No lists uploaded yet.</p>';\n        return;\n      }\n\n      // Ensure backward compatibility\n      lists.forEach(async (list) => {\n        if (!list.listId && list.metadata && list.metadata.listId) {\n          list.listId = list.metadata.listId;\n          await Database.saveToStore('lists', list);\n        }\n      });\n\n      container.innerHTML = lists.map(list => `\n        <div class=\"card mb-3\">\n          <div class=\"card-body\">\n            <h6 class=\"card-title\">${list.metadata.name}</h6>\n            <p class=\"card-text\">\n              <small class=\"text-muted\">\n                ${list.entries.length} entries ‚Ä¢ \n                Uploaded ${new Date(list.metadata.timestamp).toLocaleDateString()}\n                ${source === 'cache' ? 'üì¶' : 'üîÑ'}\n              </small>\n            </p>\n            <div class=\"btn-group btn-group-sm\">\n              <button class=\"btn btn-outline-primary\" data-list-id=\"${list.listId || list.metadata.listId}\" onclick=\"Lists.viewList(this.dataset.listId)\">\n                <i class=\"bi bi-eye\"></i> View\n              </button>\n              <button class=\"btn btn-outline-danger\" data-list-id=\"${list.listId || list.metadata.listId}\" onclick=\"Lists.deleteListConfirm(this.dataset.listId)\">\n                <i class=\"bi bi-trash\"></i> Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      `).join('');\n    } catch (error) {\n      console.error('Error rendering lists:', error);\n      UI.showToast('Error loading lists: ' + error.message, 'error');\n    }\n  });\n}\n\n// Alternative: Traditional async approach (still cache-first)\nasync function loadListsTraditional() {\n  try {\n    const lists = await Database.getFromStore('lists');\n    const container = document.getElementById('listsContainer');\n\n    if (!container) return;\n\n    if (lists.length === 0) {\n      container.innerHTML = '<p class=\"text-muted\">No lists uploaded yet.</p>';\n      return;\n    }\n\n    // Ensure backward compatibility\n    for (const list of lists) {\n      if (!list.listId && list.metadata && list.metadata.listId) {\n        list.listId = list.metadata.listId;\n        await Database.saveToStore('lists', list);\n      }\n    }\n\n    container.innerHTML = lists.map(list => `\n      <div class=\"card mb-3\">\n        <div class=\"card-body\">\n          <h6 class=\"card-title\">${list.metadata.name}</h6>\n          <p class=\"card-text\">\n            <small class=\"text-muted\">\n              ${list.entries.length} entries ‚Ä¢ \n              Uploaded ${new Date(list.metadata.timestamp).toLocaleDateString()}\n            </small>\n          </p>\n          <div class=\"btn-group btn-group-sm\">\n            <button class=\"btn btn-outline-primary\" data-list-id=\"${list.listId || list.metadata.listId}\" onclick=\"Lists.viewList(this.dataset.listId)\">\n              <i class=\"bi bi-eye\"></i> View\n            </button>\n            <button class=\"btn btn-outline-danger\" data-list-id=\"${list.listId || list.metadata.listId}\" onclick=\"Lists.deleteListConfirm(this.dataset.listId)\">\n              <i class=\"bi bi-trash\"></i> Delete\n            </button>\n          </div>\n        </div>\n      </div>\n    `).join('');\n  } catch (error) {\n    console.error('Error loading lists:', error);\n    UI.showToast('Error loading lists: ' + error.message, 'error');\n  }\n}\n\nasync function viewList(listId) {\n  try {\n    const list = await Database.getFromStore('lists', listId);\n    if (list) {\n      const modalTitle = document.getElementById('appModalLabel');\n      const modalBody = document.getElementById('appModalBody');\n      const confirmBtn = document.getElementById('appModalConfirmBtn');\n      const cancelBtn = document.querySelector('#appModal .modal-footer .btn-secondary');\n\n      modalTitle.textContent = `List: ${list.metadata.name}`;\n      const entriesPreview = list.entries.slice(0, 10).map(entry =>\n        `<li>${formatDisplayName(entry, list.metadata.nameConfig)}</li>`\n      ).join('');\n\n      modalBody.innerHTML = `\n        <p><strong>Total Entries:</strong> ${list.entries.length}</p>\n        <h6>First 10 Entries:</h6>\n        <ul>${entriesPreview}</ul>\n        ${list.entries.length > 10 ? '<p>...</p>' : ''}\n      `;\n\n      confirmBtn.style.display = 'none';\n      cancelBtn.textContent = 'Close';\n      window.appModal.show();\n    }\n  } catch (error) {\n    console.error('Error viewing list:', error);\n    UI.showToast('Error viewing list: ' + error.message, 'error');\n  }\n}\n\nfunction deleteListConfirm(listId) {\n  UI.showConfirmationModal(\n    'Delete List',\n    'Are you sure you want to delete this list? This action cannot be undone.',\n    () => {\n      try {\n        Database.deleteFromStore('lists', listId); // Fire and forget\n        UI.showToast('List deleted successfully', 'success');\n        loadLists(); // Fire and forget\n        UI.populateQuickSelects(); // Fire and forget\n      } catch (error) {\n        console.error('Error deleting list:', error);\n        UI.showToast('Error deleting list: ' + error.message, 'error');\n      }\n    }\n  );\n}\n\nfunction formatDisplayName(entry, nameConfig) {\n  // New template-based format (nameConfig is a string)\n  if (typeof nameConfig === 'string') {\n    return nameConfig.replace(/\\{([^}]+)\\}/g, (match, key) => {\n      return entry.data[key.trim()] || '';\n    }).trim() || 'Unknown';\n  }\n\n  // Backward compatibility for old object-based format\n  if (nameConfig && nameConfig.columns && nameConfig.columns.length > 0) {\n    let displayName = entry.data[nameConfig.columns[0]] || '';\n    for (let i = 1; i < nameConfig.columns.length; i++) {\n      const delimiter = nameConfig.delimiters[i - 1] || ' ';\n      const value = entry.data[nameConfig.columns[i]] || '';\n      if (value) {\n        displayName += delimiter + value;\n      }\n    }\n    return displayName || 'Unknown';\n  }\n\n  // Ultimate fallback: try common name fields\n  const commonFields = ['name', 'full_name', 'first_name', 'last_name'];\n  for (const field of commonFields) {\n    if (entry.data[field]) {\n      return entry.data[field];\n    }\n  }\n  // If no name fields found, use first available field\n  const firstField = Object.keys(entry.data)[0];\n  return entry.data[firstField] || 'Unknown';\n}\n\n// 3. Export the functions you want to be public\nexport const Lists = {\n  loadLists,\n  loadListsTraditional,\n  viewList,\n  deleteListConfirm,\n  formatDisplayName\n};\n\n// 4. Assign to window for legacy inline `onclick` handlers to work during transition\nwindow.Lists = Lists;","// ================================\n// PRIZES MANAGEMENT\n// ================================\n\nimport { Database } from './firestore-service.js';\nimport { UI } from './ui.js';\n\nasync function loadPrizes() {\n    try {\n      const prizes = await Database.getFromStore('prizes');\n      const container = document.getElementById('prizesContainer');\n\n      if (!container) return;\n\n      if (prizes.length === 0) {\n        container.innerHTML = '<p class=\"text-muted\">No prizes added yet.</p>';\n        return;\n      }\n\n      container.innerHTML = prizes.map(prize => `\n        <div class=\"card mb-3\">\n          <div class=\"card-body\">\n            <h6 class=\"card-title\">${prize.name}</h6>\n            <p class=\"card-text\">\n              <span class=\"badge bg-primary\">Qty: ${prize.quantity}</span>\n              ${prize.description ? `<br><small class=\"text-muted\">${prize.description}</small>` : ''}\n            </p>\n            <div class=\"btn-group btn-group-sm\">\n              <button class=\"btn btn-outline-primary\" data-prize-id=\"${prize.prizeId}\" onclick=\"Prizes.editPrize(this.dataset.prizeId)\">\n                <i class=\"bi bi-pencil\"></i> Edit\n              </button>\n              <button class=\"btn btn-outline-danger\" data-prize-id=\"${prize.prizeId}\" onclick=\"Prizes.deletePrizeConfirm(this.dataset.prizeId)\">\n                <i class=\"bi bi-trash\"></i> Delete\n              </button>\n            </div>\n          </div>\n        </div>\n      `).join('');\n    } catch (error) {\n      console.error('Error loading prizes:', error);\n      UI.showToast('Error loading prizes: ' + error.message, 'error');\n    }\n  }\n\n  async function handleAddPrize() {\n    const prizeNameInput = document.getElementById('prizeName');\n    const prizeQuantityInput = document.getElementById('prizeQuantity');\n    const prizeDescriptionInput = document.getElementById('prizeDescription');\n\n    const name = prizeNameInput.value.trim();\n    const quantity = parseInt(prizeQuantityInput.value);\n    const description = prizeDescriptionInput.value.trim();\n\n    if (!name) {\n      UI.showToast('Please enter a prize name', 'warning');\n      return;\n    }\n\n    if (quantity < 1) {\n      UI.showToast('Please enter a valid quantity', 'warning');\n      return;\n    }\n\n    try {\n      const prizeId = UI.generateId();\n      const prize = {\n        prizeId: prizeId,\n        name: name,\n        quantity: quantity,\n        description: description,\n        timestamp: Date.now(),\n        id: prizeId\n      };\n\n      await Database.saveToStore('prizes', prize);\n\n      UI.showToast(`Prize \"${name}\" added successfully`, 'success');\n\n      // Clear form\n      prizeNameInput.value = '';\n      prizeQuantityInput.value = '1';\n      prizeDescriptionInput.value = '';\n\n      // Refresh displays\n      await loadPrizes();\n      await UI.populateQuickSelects();\n\n    } catch (error) {\n      console.error('Error adding prize:', error);\n      UI.showToast('Error adding prize: ' + error.message, 'error');\n    }\n  }\n\n  async function editPrize(prizeId) {\n    const prizes = await Database.getFromStore('prizes');\n    const prize = prizes.find(p => p.prizeId === prizeId);\n    if (!prize) return;\n\n    const modalTitle = document.getElementById('appModalLabel');\n    const modalBody = document.getElementById('appModalBody');\n    const confirmBtn = document.getElementById('appModalConfirmBtn');\n\n    modalTitle.textContent = 'Edit Prize';\n    modalBody.innerHTML = `\n      <div class=\"mb-3\">\n        <label for=\"modalPrizeName\" class=\"form-label\">Prize Name</label>\n        <input type=\"text\" class=\"form-control\" id=\"modalPrizeName\" value=\"${prize.name}\">\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"modalPrizeQuantity\" class=\"form-label\">Quantity</label>\n        <input type=\"number\" class=\"form-control\" id=\"modalPrizeQuantity\" value=\"${prize.quantity}\" min=\"0\">\n      </div>\n      <div class=\"mb-3\">\n        <label for=\"modalPrizeDescription\" class=\"form-label\">Description</label>\n        <textarea class=\"form-control\" id=\"modalPrizeDescription\" rows=\"3\">${prize.description || ''}</textarea>\n      </div>\n    `;\n    confirmBtn.textContent = 'Save Changes';\n    confirmBtn.className = 'btn btn-primary';\n    confirmBtn.style.display = 'inline-block';\n\n    const newConfirmBtn = confirmBtn.cloneNode(true);\n    confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn);\n\n    newConfirmBtn.addEventListener('click', async () => {\n      const newName = document.getElementById('modalPrizeName').value.trim();\n      const newQuantity = parseInt(document.getElementById('modalPrizeQuantity').value);\n      const newDescription = document.getElementById('modalPrizeDescription').value.trim();\n\n      if (newName && newQuantity >= 0) {\n        prize.name = newName;\n        prize.quantity = newQuantity;\n        prize.description = newDescription;\n        await Database.saveToStore('prizes', prize);\n\n        UI.showToast('Prize updated successfully', 'success');\n        await loadPrizes();\n        await UI.populateQuickSelects();\n        window.appModal.hide();\n      } else {\n        UI.showToast('Please enter valid prize details.', 'warning');\n      }\n    }, { once: true });\n\n    window.appModal.show();\n  }\n\n  async function deletePrizeConfirm(prizeId) {\n    UI.showConfirmationModal('Delete Prize', 'Are you sure you want to delete this prize?', async () => {\n      await Database.deleteFromStore('prizes', prizeId);\n      UI.showToast('Prize deleted successfully', 'success');\n      await loadPrizes();\n      await UI.populateQuickSelects();\n    });\n  }\n\nexport const Prizes = {\n  loadPrizes,\n  handleAddPrize,\n  editPrize,\n  deletePrizeConfirm\n};\n\nwindow.Prizes = Prizes;","// ================================\n// WINNER MANAGEMENT & FILTERING\n// ================================\n\nimport { Database } from './firestore-service.js';\nimport { UI } from './ui.js';\nimport { Lists } from './lists.js';\nimport { settings } from './settings.js'; // Import settings directly\nimport { getCurrentList, getLastAction, setLastAction } from '../app.js'; // Import central state\nimport { loadHistory } from '../app.js'; // Import loadHistory from app.js\n\n// Global state variables (will be managed by app.js eventually)\nlet lastAction = null; // This will eventually be managed by app.js\n\nasync function loadWinners() {\n  try {\n    const winners = await Database.getFromStore('winners');\n    const lists = await Database.getFromStore('lists');\n    const tbody = document.getElementById('winnersTableBody');\n\n    if (!tbody) return;\n\n    const listNameMap = {};\n    lists.forEach(list => {\n      const listId = list.listId || list.metadata.listId;\n      listNameMap[listId] = list.metadata.name;\n    });\n\n    const filterPrize = document.getElementById('filterPrize').value;\n    const filterList = document.getElementById('filterList').value;\n    const filterSelection = document.getElementById('filterSelection').value;\n\n    populateWinnerFilters(winners, lists, filterPrize, filterList, filterSelection);\n\n    const filteredWinners = winners.filter(winner => {\n      const prizeMatch = !filterPrize || winner.prize === filterPrize;\n      const listName = listNameMap[winner.listId] || 'Unknown';\n      const listMatch = !filterList || listName === filterList;\n      const selectionMatch = !filterSelection || winner.historyId === filterSelection;\n      return prizeMatch && listMatch && selectionMatch;\n    });\n\n    updateWinnersCountDisplay(filteredWinners.length, winners.length, filterPrize, filterList, filterSelection);\n\n    if (filteredWinners.length === 0) {\n      tbody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center text-muted\">No winners match the current filters.</td></tr>';\n      return;\n    }\n\n    tbody.innerHTML = filteredWinners.map(winner => `\n      <tr>\n        <td><span class=\"badge bg-primary\">${winner.uniqueId || winner.winnerId.slice(0, 5).toUpperCase()}</span></td>\n        <td>${winner.displayName}</td>\n        <td>${winner.prize}</td>\n        <td>${new Date(winner.timestamp).toLocaleDateString()}</td>\n        <td>${listNameMap[winner.listId] || 'Unknown'}</td>\n        <td>\n          <button class=\"btn btn-sm btn-outline-danger\" data-winner-id=\"${winner.winnerId}\" onclick=\"Winners.deleteWinnerConfirm(this.dataset.winnerId)\">\n            <i class=\"bi bi-trash\"></i>\n          </button>\n        </td>\n      </tr>\n    `).join('');\n  } catch (error) {\n    console.error('Error loading winners:', error);\n    UI.showToast('Error loading winners: ' + error.message, 'error');\n  }\n}\n\nfunction populateWinnerFilters(winners, lists, selectedPrize = '', selectedList = '', selectedSelection = '') {\n  const prizeFilter = document.getElementById('filterPrize');\n  const listFilter = document.getElementById('filterList');\n  const selectionFilter = document.getElementById('filterSelection');\n\n  const listNameMap = {};\n  lists.forEach(list => {\n    const listId = list.listId || list.metadata.listId;\n    listNameMap[listId] = list.metadata.name;\n  });\n\n  const prizes = [...new Set(winners.map(w => w.prize))].sort();\n  const listNames = [...new Set(winners.map(w => listNameMap[w.listId] || 'Unknown'))].sort();\n  const selections = [...new Set(winners.map(w => w.historyId).filter(Boolean))];\n\n  // Populate Prize Filter\n  prizeFilter.innerHTML = '<option value=\"\">All Prizes</option>';\n  prizes.forEach(prize => {\n    const count = winners.filter(w => w.prize === prize).length;\n    prizeFilter.innerHTML += `<option value=\"${prize}\">${prize} (${count})</option>`;\n  });\n  prizeFilter.value = selectedPrize;\n\n  // Populate List Filter\n  listFilter.innerHTML = '<option value=\"\">All Lists</option>';\n  listNames.forEach(listName => {\n    const count = winners.filter(w => (listNameMap[w.listId] || 'Unknown') === listName).length;\n    listFilter.innerHTML += `<option value=\"${listName}\">${listName} (${count})</option>`;\n  });\n  listFilter.value = selectedList;\n\n  // Populate Selection ID Filter\n  selectionFilter.innerHTML = '<option value=\"\">All Selections</option>';\n  \n  const selectionEntries = selections.map(id => {\n    const winnersInSelection = winners.filter(w => w.historyId === id);\n    const timestamp = winnersInSelection[0]?.timestamp;\n    const prize = winnersInSelection[0]?.prize;\n    const count = winnersInSelection.length;\n    return {\n      id,\n      timestamp,\n      prize,\n      count,\n      label: `${new Date(timestamp).toLocaleDateString()} - ${prize} (${count} winner${count > 1 ? 's' : ''})`\n    };\n  });\n\n  selectionEntries.sort((a, b) => b.timestamp - a.timestamp);\n  \n  selectionEntries.forEach(entry => {\n    selectionFilter.innerHTML += `<option value=\"${entry.id}\">${entry.label}</option>`;\n  });\n  selectionFilter.value = selectedSelection;\n}\n\nfunction updateWinnersCountDisplay(filteredCount, totalCount, filterPrize, filterList, filterSelection) {\n  const winnersCountElement = document.getElementById('winnersCount');\n  const filterStatusElement = document.getElementById('filterStatus');\n  \n  if (!winnersCountElement || !filterStatusElement) return;\n\n  if (filteredCount === totalCount) {\n    winnersCountElement.textContent = `Showing ${totalCount} winners`;\n  } else {\n    winnersCountElement.textContent = `Showing ${filteredCount} of ${totalCount} winners`;\n  }\n\n  const activeFilters = [];\n  if (filterPrize) activeFilters.push(`Prize: ${filterPrize}`);\n  if (filterList) activeFilters.push(`List: ${filterList}`);\n  if (filterSelection) activeFilters.push(`Selection: ${filterSelection}`);\n\n  if (activeFilters.length > 0) {\n    filterStatusElement.textContent = `Filtered by: ${activeFilters.join(', ')}`;\n  } else {\n    filterStatusElement.textContent = '';\n  }\n}\n\nasync function deleteWinnerConfirm(winnerId) {\n  UI.showConfirmationModal('Delete Winner', 'Are you sure you want to delete this winner record?', () => {\n    try {\n      Database.deleteFromStore('winners', winnerId); // Fire and forget\n      UI.showToast('Winner deleted successfully', 'success');\n      loadWinners(); // Fire and forget\n      loadHistory(); // Fire and forget\n    } catch (error) {\n      console.error('Error deleting winner:', error);\n      UI.showToast('Error deleting winner: ' + error.message, 'error');\n    }\n  });\n}\n\nasync function saveWinner(winner) {\n  await Database.saveToStore('winners', winner);\n}\n\nasync function getAllWinners() {\n  return Database.getFromStore('winners');\n}\n\nasync function clearAllWinners() {\n  UI.showConfirmationModal(\n    'Clear All Winners',\n    'Are you sure you want to delete ALL winner records? This action cannot be undone and will remove all winners from the database.',\n    async () => {\n      try {\n        UI.showProgress('Clearing Winners', 'Removing all winner records...');\n        \n        const winners = await getAllWinners();\n        let deletedCount = 0;\n\n        for (const winner of winners) {\n          Database.deleteFromStore('winners', winner.winnerId); // Fire and forget\n          deletedCount++;\n          UI.updateProgress((deletedCount / winners.length) * 100, `Deleted ${deletedCount} of ${winners.length} winners...`);\n        }\n\n        UI.hideProgress();\n        UI.showToast(`Successfully cleared ${deletedCount} winner records`, 'success');\n        \n        await loadWinners();\n        loadHistory();\n      } catch (error) {\n        UI.hideProgress();\n        console.error('Error clearing winners:', error);\n        UI.showToast('Error clearing winners: ' + error.message, 'error');\n      }\n    }\n  );\n}\n\nasync function undoLastSelection() {\n  const currentLastAction = getLastAction(); // Get the current lastAction from app.js\n\n  if (!currentLastAction || currentLastAction.type !== 'selectWinners') {\n    UI.showToast('No recent selection to undo', 'warning');\n    return;\n  }\n\n  UI.showConfirmationModal(\n    'Undo Last Selection',\n    'Are you sure you want to undo the last winner selection? This will delete the winners, restore prize quantities, and cannot be undone.',\n    async () => {\n      try {\n        UI.showProgress('Undoing Selection', 'Reversing last selection...');\n\n        // Delete winners (fire and forget)\n        for (const winner of currentLastAction.winners) {\n          Database.deleteFromStore('winners', winner.winnerId);\n        }\n\n        // Restore prize quantity (fire and forget)\n        Database.getFromStore('prizes').then(prizes => {\n          const prize = prizes.find(p => p.prizeId === currentLastAction.prizeId);\n          if (prize) {\n            prize.quantity += currentLastAction.prizeCount;\n            Database.saveToStore('prizes', prize);\n          }\n        });\n\n        // Delete history entry (fire and forget)\n        Database.deleteFromStore('history', currentLastAction.historyId);\n\n        // Restore entries to list if they were removed (fire and forget)\n        const currentList = getCurrentList(); // Get the currentList from app.js\n        if (settings.preventDuplicates && currentList) {\n          currentList.entries.push(...currentLastAction.removedEntries);\n          if (!currentList.listId && currentList.metadata && currentList.metadata.listId) {\n            currentList.listId = currentList.metadata.listId;\n          }\n          Database.saveToStore('lists', currentList);\n        }\n\n        UI.hideProgress();\n        UI.showToast('Selection undone successfully', 'success');\n\n        await loadWinners();\n        resetToSelectionMode();\n        setLastAction(null); // Clear lastAction in app.js\n\n      } catch (error) {\n        UI.hideProgress();\n        console.error('Error undoing selection:', error);\n        UI.showToast('Error undoing selection: ' + error.message, 'error');\n      }\n    }\n  );\n}\n\nfunction resetToSelectionMode() {\n  document.getElementById('selectionControls').classList.remove('d-none');\n  document.getElementById('prizeDisplay').classList.add('d-none');\n  document.getElementById('winnersGrid').classList.add('d-none');\n  document.getElementById('actionButtons').classList.add('d-none');\n  UI.populateQuickSelects();\n}\n\nexport const Winners = {\n  loadWinners,\n  populateWinnerFilters,\n  updateWinnersCountDisplay,\n  deleteWinnerConfirm,\n  saveWinner,\n  getAllWinners,\n  clearAllWinners,\n  undoLastSelection,\n  resetToSelectionMode\n};\n\nwindow.Winners = Winners;","// ================================\n// VISUAL ANIMATIONS\n// ================================\n\n// ================================\n// VISUAL ANIMATIONS\n// ================================\n\nimport { Settings } from './settings.js';\n\nlet animationFrameId = null;\n\n// Enhanced startParticleAnimation function for Swirl Animation\nfunction startSwirlAnimation() {\n  console.log('startSwirlAnimation called');\n  const canvas = document.getElementById('animationCanvas');\n  const ctx = canvas.getContext('2d');\n  let particles = [];\n\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n\n  // Convert hex to RGB\n  function hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  const primaryRgb = hexToRgb(Settings.settings.primaryColor);\n  const secondaryRgb = hexToRgb(Settings.settings.secondaryColor);\n\n  class Particle {\n    constructor(isStar = false) {\n      this.x = canvas.width / 2;\n      this.y = canvas.height / 2;\n      this.radius = isStar ? Math.random() * 3 + 2 : Math.random() * 1 + 0.5; // Larger for stars, smaller for dots\n      this.life = Math.random() * 100 + 100;\n      this.angle = Math.random() * Math.PI * 2;\n      this.speed = Math.random() * 4 + 2;\n      this.color = Math.random() > 0.5 ? primaryRgb : secondaryRgb;\n      this.opacity = 1;\n      this.trailLength = Math.random() * 20 + 10; // Trail effect\n    }\n\n    update() {\n      this.x += Math.cos(this.angle) * this.speed;\n      this.y += Math.sin(this.angle) * this.speed;\n      this.angle += (Math.random() - 0.5) * 0.3; // Swirl effect\n      this.life--;\n      this.opacity = this.life / 100;\n      this.speed *= 0.99; // Slow down over time for breeze effect\n    }\n\n    draw() {\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(${this.color.r}, ${this.color.g}, ${this.color.b}, ${this.opacity})`;\n      ctx.fill();\n\n      // Draw trail\n      ctx.beginPath();\n      ctx.moveTo(this.x, this.y);\n      ctx.lineTo(this.x - Math.cos(this.angle) * this.trailLength, this.y - Math.sin(this.angle) * this.trailLength);\n      ctx.strokeStyle = `rgba(${this.color.r}, ${this.color.g}, ${this.color.b}, ${this.opacity * 0.5})`;\n      ctx.lineWidth = 1;\n      ctx.stroke();\n    }\n  }\n\n  function createBurst(x, y, count = 20) {\n    for (let i = 0; i < count; i++) {\n      const p = new Particle(true); // Star particle\n      p.x = x;\n      p.y = y;\n      p.speed = Math.random() * 6 + 3;\n      p.angle += (i - count / 2) * 0.1; // Radial spread\n      particles.push(p);\n    }\n  }\n\n  let burstCounter = 0;\n\n  function animate() {\n    // Fading trail effect\n    ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n    // Create new particles for the breeze\n    for (let i = 0; i < 5; i++) {\n      particles.push(new Particle(false)); // Dot particle\n    }\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(true)); // Star particle\n    }\n\n    // Create burst effect periodically\n    burstCounter++;\n    if (burstCounter % 30 === 0) { // Every half second\n      createBurst(Math.random() * canvas.width, Math.random() * canvas.height);\n    }\n\n    for (let i = particles.length - 1; i >= 0; i--) {\n      const p = particles[i];\n      p.update();\n      p.draw();\n      if (p.life <= 0) {\n        particles.splice(i, 1);\n      }\n    }\n\n    animationFrameId = requestAnimationFrame(animate);\n  }\n\n  window.addEventListener('resize', () => {\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n  });\n}\n\n// Basic particle animation (for 'animation' mode)\nfunction startParticleAnimation() {\n  const canvas = document.getElementById('animationCanvas');\n  const ctx = canvas.getContext('2d');\n  let particles = [];\n\n  canvas.width = window.innerWidth;\n  canvas.height = window.innerHeight;\n\n  // Convert hex to RGB\n  function hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n\n  const primaryRgb = hexToRgb(Settings.settings.primaryColor);\n  const secondaryRgb = hexToRgb(Settings.settings.secondaryColor);\n\n  class SimpleParticle {\n    constructor() {\n      this.x = Math.random() * canvas.width;\n      this.y = Math.random() * canvas.height;\n      this.radius = Math.random() * 2 + 1;\n      this.vx = (Math.random() - 0.5) * 4;\n      this.vy = (Math.random() - 0.5) * 4;\n      this.color = Math.random() > 0.5 ? primaryRgb : secondaryRgb;\n      this.opacity = Math.random() * 0.5 + 0.5;\n    }\n\n    update() {\n      this.x += this.vx;\n      this.y += this.vy;\n      \n      if (this.x < 0 || this.x > canvas.width) this.vx *= -1;\n      if (this.y < 0 || this.y > canvas.height) this.vy *= -1;\n    }\n\n    draw() {\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);\n      ctx.fillStyle = `rgba(${this.color.r}, ${this.color.g}, ${this.color.b}, ${this.opacity})`;\n      ctx.fill();\n    }\n  }\n\n  // Create initial particles\n  for (let i = 0; i < 50; i++) {\n    particles.push(new SimpleParticle());\n  }\n\n  function animate() {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    particles.forEach(particle => {\n      particle.update();\n      particle.draw();\n    });\n\n    animationFrameId = requestAnimationFrame(animate);\n  }\n\n  animate();\n}\n\n// Stop animation function\nfunction stopAnimation() {\n  if (animationFrameId) {\n    cancelAnimationFrame(animationFrameId);\n    animationFrameId = null;\n  }\n}\n\n// Export the functions you want to be public\nexport const Animations = {\n  startSwirlAnimation,\n  startParticleAnimation,\n  stopAnimation\n};\n\n// Assign to window for legacy inline `onclick` handlers to work during transition\nwindow.Animations = Animations;\n\n","// ================================\n// WINNER SELECTION LOGIC\n// ================================\n\nimport { UI } from './ui.js';\nimport { Database } from './firestore-service.js';\nimport { Lists } from './lists.js';\nimport { Winners } from './winners.js';\nimport { settings } from './settings.js'; // Import settings directly\nimport { Animations } from './animations.js';\nimport { getCurrentList, setCurrentList, getLastAction, setLastAction, loadHistory, updateHistoryStats } from '../app.js'; // Import central state and history functions\n\nfunction createRandomWorker() {\n  const workerCode = `\n    function generateId(length = 10) {\n      const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      let result = '';\n      for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n      }\n      return result;\n    }\n    \n    function selectRandomWinners(entries, numWinners, seed) {\n      // Use seed for reproducible randomness if needed\n      if (seed) {\n        Math.seedrandom = function(seed) {\n          let x = Math.sin(seed) * 10000;\n          return function() {\n            x = Math.sin(x) * 10000;\n            return x - Math.floor(x);\n          };\n        };\n        Math.random = Math.seedrandom(seed);\n      }\n      \n      const available = [...entries];\n      const selected = [];\n      \n      for (let i = 0; i < numWinners && available.length > 0; i++) {\n        const randomIndex = Math.floor(Math.random() * available.length);\n        selected.push(available.splice(randomIndex, 1)[0]);\n      }\n      \n      return selected;\n    }\n    \n    self.onmessage = function(e) {\n      if (e.data.type === 'select') {\n        try {\n          const result = selectRandomWinners(e.data.entries, e.data.numWinners, e.data.seed);\n          self.postMessage({ type: 'complete', result });\n        } catch (error) {\n          self.postMessage({ type: 'error', error: error.message });\n        }\n      }\n    };\n  `;\n\n  const blob = new Blob([workerCode], { type: 'application/javascript' });\n  return new Worker(URL.createObjectURL(blob));\n}\n\nasync function handleBigPlayClick() {\n  try {\n    const listId = document.getElementById('quickListSelect').value;\n    const prizeId = document.getElementById('quickPrizeSelect').value;\n    const winnersCount = parseInt(document.getElementById('quickWinnersCount').value);\n    const displayMode = document.getElementById('displayMode').value;\n\n    if (!listId || !prizeId) {\n      UI.showToast('Please select both a list and a prize', 'warning');\n      return;\n    }\n\n    if (winnersCount < 1) {\n      UI.showToast('Please enter a valid number of winners', 'warning');\n      return;\n    }\n\n    // Load the selected list and prize\n    const list = await Database.getFromStore('lists', listId);\n    const prizes = await Database.getFromStore('prizes');\n    const selectedPrize = prizes.find(p => p.prizeId === prizeId);\n\n    if (!list || !selectedPrize) {\n      UI.showToast('Selected list or prize not found', 'error');\n      return;\n    }\n\n    if (selectedPrize.quantity < winnersCount) {\n      UI.showToast(`Not enough prizes available. Only ${selectedPrize.quantity} remaining.`, 'warning');\n      return;\n    }\n\n    if (list.entries.length < winnersCount) {\n      UI.showToast(`Not enough entries in list. Only ${list.entries.length} available.`, 'warning');\n      return;\n    }\n\n    // Set current list for global access\n    setCurrentList(list);\n\n    console.log('Big play clicked, display mode:', displayMode);\n    \n    if (displayMode === 'countdown' || displayMode === 'animation' || displayMode === 'swirl-animation') {\n      console.log('Calling showCountdown for mode:', displayMode);\n      showCountdown(winnersCount, selectedPrize, 'all-at-once');\n    } else {\n      console.log('Calling selectWinners directly for mode:', displayMode);\n      await selectWinners(winnersCount, selectedPrize, displayMode);\n    }\n  } catch (error) {\n    console.error('Error in big play click:', error);\n    UI.showToast('Error selecting winners: ' + error.message, 'error');\n  }\n}\n\nfunction showCountdown(winnersCount, selectedPrize, postCountdownDisplayMode = 'all-at-once') {\n  const countdownOverlay = document.getElementById('countdownOverlay');\n  const countdownNumber = document.getElementById('countdownNumber');\n  const displayMode = document.getElementById('displayMode').value;\n\n  console.log('Display mode selected:', displayMode);\n  \n  if (displayMode === 'animation') {\n    console.log('Starting particle animation');\n    Animations.startParticleAnimation();\n  }\n  else if (displayMode === 'swirl-animation') {\n    console.log('Starting swirl animation');\n    Animations.startSwirlAnimation();\n  }\n\n  let count = parseInt(document.getElementById('countdownDuration').value) || 5;\n  countdownOverlay.classList.remove('d-none');\n  countdownNumber.textContent = count;\n\n  const interval = setInterval(() => {\n    count--;\n    if (count > 0) {\n      countdownNumber.textContent = count;\n      if (settings.enableSoundEffects) {\n        playSound('countdown');\n      }\n    } else {\n      clearInterval(interval);\n      if (displayMode === 'animation' || displayMode === 'swirl-animation') {\n        console.log('Stopping animation for mode:', displayMode);\n        Animations.stopAnimation();\n      }\n      countdownOverlay.classList.add('d-none');\n      selectWinners(winnersCount, selectedPrize, postCountdownDisplayMode);\n    }\n  }, 1000);\n}\n\nasync function selectWinners(numWinners, selectedPrize, displayMode) {\n  try {\n    UI.showProgress('Selecting Winners', 'Preparing random selection...');\n\n    // Hide selection controls\n    document.getElementById('selectionControls').classList.add('d-none');\n\n    // Create and use random worker\n    const randomWorker = createRandomWorker();\n\n    const selectedEntries = await new Promise((resolve, reject) => {\n      randomWorker.onmessage = function (e) {\n        if (e.data.type === 'complete') {\n          resolve(e.data.result);\n        } else if (e.data.type === 'error') {\n          reject(new Error(e.data.error));\n        }\n      };\n\n      randomWorker.postMessage({\n        type: 'select',\n        entries: getCurrentList().entries,\n        numWinners: numWinners,\n        seed: Date.now()\n      });\n    });\n\n    UI.updateProgress(50, 'Creating winner records...');\n\n    // Create winner records\n    const historyId = UI.generateId(8);\n    const winners = selectedEntries.map((entry, index) => ({\n      winnerId: UI.generateId(),\n      uniqueId: UI.generateId(5).toUpperCase(),\n      ...entry.data,\n      displayName: Lists.formatDisplayName(entry, getCurrentList().metadata.nameConfig),\n      prize: selectedPrize.name,\n      timestamp: Date.now(),\n      originalEntry: entry,\n      listId: getCurrentList().listId || getCurrentList().metadata.listId,\n      position: index + 1,\n      historyId: historyId\n    }));\n\n    UI.updateProgress(75, 'Saving winners...');\n\n    // Save winners\n    for (const winner of winners) {\n      await Winners.saveWinner(winner);\n    }\n\n    // Update prize quantity\n    selectedPrize.quantity -= numWinners;\n    await Database.saveToStore('prizes', selectedPrize);\n\n    // Save history\n    const historyEntry = {\n      historyId: historyId,\n      listId: getCurrentList().listId || getCurrentList().metadata.listId,\n      listName: getCurrentList().metadata.name,\n      prize: selectedPrize.name,\n      winners: winners.map(w => ({ winnerId: w.winnerId, displayName: w.displayName })),\n      timestamp: Date.now()\n    };\n    await Database.saveToStore('history', historyEntry);\n\n    // Store last action for undo\n    setLastAction({\n      type: 'selectWinners',\n      winners: winners,\n      removedEntries: selectedEntries,\n      prizeId: selectedPrize.prizeId,\n      prizeCount: numWinners,\n      historyId: historyEntry.historyId\n    });\n\n    // Remove winners from list if setting is enabled\n    if (settings.preventDuplicates) {\n      const updatedList = getCurrentList();\n      updatedList.entries = updatedList.entries.filter(entry =>\n        !selectedEntries.some(selected => selected.id === entry.id)\n      );\n      if (!updatedList.listId && updatedList.metadata && updatedList.metadata.listId) {\n        updatedList.listId = updatedList.metadata.listId;\n      }\n      setCurrentList(updatedList);\n      await Database.saveToStore('lists', updatedList);\n    }\n\n    UI.updateProgress(100, 'Winners selected!');\n\n    setTimeout(() => {\n      UI.hideProgress();\n      displayWinnersPublicly(winners, selectedPrize, displayMode);\n\n      // Update the winners list in management interface\n      Winners.loadWinners();\n      loadHistory(); // Call from app.js\n\n      if (settings.enableSoundEffects) {\n        playSound('winner');\n      }\n    }, 500);\n\n  } catch (error) {\n    UI.hideProgress();\n    console.error('Error selecting winners:', error);\n    UI.showToast('Error selecting winners: ' + error.message, 'error');\n    Winners.resetToSelectionMode();\n  }\n}\n\nfunction displayWinnersPublicly(winners, prize, displayMode) {\n  // Show prize display\n  const prizeDisplay = document.getElementById('prizeDisplay');\n  document.getElementById('displayPrizeName').textContent = prize.name;\n  document.getElementById('displayPrizeSubtitle').textContent = `${winners.length} Winner${winners.length > 1 ? 's' : ''}`;\n  prizeDisplay.classList.remove('d-none');\n\n  // Show winners in grid\n  const winnersGrid = document.getElementById('winnersGrid');\n  winnersGrid.innerHTML = '';\n\n  if (displayMode === 'sequential') {\n    displayWinnersSequentially(winners, winnersGrid);\n  } else {\n    displayAllWinnersAtOnce(winners, winnersGrid);\n  }\n\n  winnersGrid.classList.remove('d-none');\n\n  // Show action buttons\n  document.getElementById('actionButtons').classList.remove('d-none');\n}\n\nfunction displayAllWinnersAtOnce(winners, winnersGrid) {\n  winners.forEach((winner, index) => {\n    const winnerCard = createWinnerCard(winner, index);\n    winnersGrid.appendChild(winnerCard);\n  });\n}\n\nfunction displayWinnersSequentially(winners, winnersGrid) {\n  const displayDuration = parseFloat(document.getElementById('displayDuration').value) || 0.5;\n  console.log('Sequential reveal with delay:', displayDuration, 'seconds');\n  \n  winners.forEach((winner, index) => {\n    const delay = index * (displayDuration * 1000);\n    console.log(`Winner ${index + 1} will appear after ${delay}ms`);\n    \n    setTimeout(() => {\n      const winnerCard = createWinnerCard(winner, index);\n      winnerCard.style.opacity = '0';\n      winnerCard.style.transform = 'translateY(20px)';\n      winnersGrid.appendChild(winnerCard);\n      \n      // Animate in\n      setTimeout(() => {\n        winnerCard.style.transition = 'all 0.6s ease-out';\n        winnerCard.style.opacity = '1';\n        winnerCard.style.transform = 'translateY(0)';\n        \n        // Play sound for each winner if enabled\n        if (settings.enableSoundEffects) {\n          playSound('winner');\n        }\n      }, 100);\n    }, delay);\n  });\n}\n\nfunction createWinnerCard(winner, index) {\n  const winnerCard = document.createElement('div');\n  winnerCard.className = 'winner-card';\n  \n  winnerCard.innerHTML = `\n    <div class=\"winner-number\">${winner.position}</div>\n    <div class=\"winner-name\">${winner.displayName}</div>\n    <div class=\"winner-details\">${getWinnerDetails(winner)}</div>\n  `;\n  \n  return winnerCard;\n}\n\nfunction getWinnerDetails(winner) {\n  const details = [];\n  const fieldsToShow = ['email', 'phone', 'department', 'id', 'employee_id', 'member_id'];\n\n  for (const field of fieldsToShow) {\n    if (winner[field]) {\n      details.push(`${field.toUpperCase()}: ${winner[field]}`);\n      break;\n    }\n  }\n\n  return details.length > 0 ? details[0] : 'Winner Selected';\n}\n\n// Sound Effects\nfunction playSound(type) {\n  if (!settings.enableSoundEffects) return;\n\n  try {\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n\n    if (type === 'countdown') {\n      playBeep(audioContext, 800, 100);\n    } else if (type === 'winner') {\n      playChord(audioContext);\n    }\n  } catch (error) {\n    console.warn('Could not play sound:', error);\n  }\n}\n\nfunction playBeep(audioContext, frequency, duration) {\n  const oscillator = audioContext.createOscillator();\n  const gainNode = audioContext.createGain();\n\n  oscillator.connect(gainNode);\n  gainNode.connect(audioContext.destination);\n\n  oscillator.frequency.setValueAtTime(frequency, audioContext.currentTime);\n  oscillator.type = 'sine';\n\n  gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);\n  gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration / 1000);\n\n  oscillator.start(audioContext.currentTime);\n  oscillator.stop(audioContext.currentTime + duration / 1000);\n}\n\nfunction playChord(audioContext) {\n  const frequencies = [523.25, 659.25, 783.99]; // C, E, G\n  const duration = 1000;\n\n  frequencies.forEach(freq => {\n    const oscillator = audioContext.createOscillator();\n    const gainNode = audioContext.createGain();\n\n    oscillator.connect(gainNode);\n    gainNode.connect(audioContext.destination);\n\n    oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);\n    oscillator.type = 'sine';\n\n    gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);\n    gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + duration / 1000);\n\n    oscillator.start(audioContext.currentTime);\n    oscillator.stop(audioContext.currentTime + duration / 1000);\n  });\n}\n\nexport const Selection = {\n  createRandomWorker,\n  handleBigPlayClick,\n  showCountdown,\n  selectWinners,\n  displayWinnersPublicly,\n  displayAllWinnersAtOnce,\n  displayWinnersSequentially,\n  createWinnerCard,\n  getWinnerDetails,\n  playSound\n};\n\nwindow.Selection = Selection;","// ================================\n// CSV PARSING & UPLOAD\n// ================================\n\nimport { UI } from './ui.js';\nimport { Lists } from './lists.js';\nimport { Database } from './firestore-service.js';\n\nlet pendingCSVData = null;\n\nfunction parseCSV(csvText) {\n  const lines = csvText.split('\\n').filter(line => line.trim());\n\n  if (lines.length === 0) {\n    return { data: [], errors: ['Empty file'] };\n  }\n\n  const headers = parseCSVLine(lines[0]);\n  const data = [];\n  const errors = [];\n\n  for (let i = 1; i < lines.length; i++) {\n    try {\n      const values = parseCSVLine(lines[i]);\n      if (values.length > 0) {\n        const row = {};\n        headers.forEach((header, index) => {\n          row[header.trim()] = values[index]?.trim() || '';\n        });\n        data.push(row);\n      }\n    } catch (error) {\n      errors.push(`Line ${i + 1}: ${error.message}`);\n    }\n  }\n\n  return { data, errors };\n}\n\nfunction parseCSVLine(line) {\n  const result = [];\n  let current = '';\n  let inQuotes = false;\n\n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    const nextChar = line[i + 1];\n\n    if (char === '\"') {\n      if (inQuotes && nextChar === '\"') {\n        current += '\"';\n        i++; // Skip next quote\n      } else {\n        inQuotes = !inQuotes;\n      }\n    } else if (char === ',' && !inQuotes) {\n      result.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n\n  result.push(current);\n  return result;\n}\n\nasync function handleCSVUpload() {\n  const listNameInput = document.getElementById('listName');\n  const csvFileInput = document.getElementById('csvFile');\n\n  const csvFile = csvFileInput.files[0];\n  const fileName = csvFile.name.replace(/\\.[^/.]+$/, \"\");\n  const listName = listNameInput.value.trim() || fileName;\n\n  if (!listName) {\n    // UI.showToast('Please enter a list name', 'warning');\n    // return;\n  }\n\n  if (!csvFile) {\n    UI.showToast('Please select a CSV file', 'warning');\n    return;\n  }\n\n  try {\n    UI.showProgress('Processing CSV', 'Reading file...');\n\n    const csvText = await UI.readFileAsText(csvFile);\n    const { data, errors } = parseCSV(csvText);\n\n    if (errors.length > 0) {\n      throw new Error('CSV parsing errors: ' + errors.join(', '));\n    }\n\n    if (data.length === 0) {\n      throw new Error('CSV file appears to be empty');\n    }\n\n    UI.hideProgress();\n\n    pendingCSVData = {\n      listName: listName,\n      fileName: csvFile.name,\n      data: data\n    };\n\n    showCSVPreview(data, listName);\n  } catch (error) {\n    UI.hideProgress();\n    console.error('CSV upload error:', error);\n    UI.showToast('Error processing CSV: ' + error.message, 'error');\n  }\n}\n\nfunction showCSVPreview(data, listName) {\n  const previewCard = document.getElementById('dataPreviewCard');\n  const previewHeaders = document.getElementById('previewHeaders');\n  const previewBody = document.getElementById('previewBody');\n\n  previewCard.style.display = 'block';\n  const headers = Object.keys(data[0]);\n\n  previewHeaders.innerHTML = '<tr>' +\n    headers.map(header => `<th>${header}</th>`).join('') +\n    '</tr>';\n\n  const previewData = data.slice(0, 10);\n\n  previewBody.innerHTML = previewData.map(row =>\n    '<tr>' +\n    headers.map(header => `<td>${row[header] || ''}</td>`).join('') +\n    '</tr>'\n  ).join('');\n\n  const previewTitle = document.querySelector('#dataPreviewCard .card-title');\n  previewTitle.innerHTML = `Data Preview - <span class=\"list-name\">\"${listName}\"</span> <span class=\"list-count\">(${data.length} total records, showing first ${previewData.length})</span>`;\n\n  showNameConfiguration(headers, data[0]);\n  previewCard.scrollIntoView({ behavior: 'smooth' });\n  UI.showToast(`Preview ready! Showing first ${previewData.length} of ${data.length} records`, 'info');\n}\n\nfunction showNameConfiguration(headers, firstRow) {\n  const nameConfigCard = document.getElementById('nameConfigCard');\n  const availableFields = document.getElementById('availableFields');\n  const nameTemplateInput = document.getElementById('nameTemplate');\n  const namePreview = document.getElementById('namePreview');\n  const idColumnSelect = document.getElementById('idColumnSelect');\n  const columnIdSection = document.getElementById('columnIdSection');\n  const autoGenerateId = document.getElementById('autoGenerateId');\n  const useColumnId = document.getElementById('useColumnId');\n\n  nameConfigCard.style.display = 'block';\n  availableFields.innerHTML = '';\n\n  // Populate available fields for name template\n  headers.forEach(header => {\n    const fieldBtn = document.createElement('button');\n    fieldBtn.className = 'btn btn-sm btn-outline-secondary';\n    fieldBtn.textContent = header;\n    fieldBtn.onclick = () => {\n      const cursorPos = nameTemplateInput.selectionStart;\n      const text = nameTemplateInput.value;\n      const placeholder = `{${header}}`;\n      nameTemplateInput.value = text.slice(0, cursorPos) + placeholder + text.slice(cursorPos);\n      nameTemplateInput.focus();\n      updatePreview();\n    };\n    availableFields.appendChild(fieldBtn);\n  });\n\n  // Populate ID column dropdown\n  idColumnSelect.innerHTML = '<option value=\"\">Select a column...</option>';\n  headers.forEach(header => {\n    const option = document.createElement('option');\n    option.value = header;\n    option.textContent = header;\n    idColumnSelect.appendChild(option);\n  });\n\n  // Set default name template\n  const defaultTemplate = headers.length > 1 ? `{${headers[0]}} {${headers[1]}}` : `{${headers[0]}}`;\n  nameTemplateInput.value = defaultTemplate;\n\n  function updatePreview() {\n    const template = nameTemplateInput.value;\n    const previewText = template.replace(/\\{([^}]+)\\}/g, (match, key) => {\n      return firstRow[key] || '';\n    });\n    namePreview.textContent = previewText;\n  }\n\n  // Setup ID source radio button listeners\n  function toggleIdSection() {\n    if (useColumnId.checked) {\n      columnIdSection.style.display = 'block';\n    } else {\n      columnIdSection.style.display = 'none';\n    }\n  }\n\n  // Remove existing listeners to prevent conflicts\n  autoGenerateId.removeEventListener('change', toggleIdSection);\n  useColumnId.removeEventListener('change', toggleIdSection);\n  nameTemplateInput.removeEventListener('input', updatePreview);\n\n  // Add fresh listeners\n  autoGenerateId.addEventListener('change', toggleIdSection);\n  useColumnId.addEventListener('change', toggleIdSection);\n  nameTemplateInput.addEventListener('input', updatePreview);\n\n  // Initial setup\n  updatePreview();\n  toggleIdSection();\n}\n\nasync function handleConfirmUpload() {\n  if (!pendingCSVData) {\n    UI.showToast('No data to upload', 'error');\n    return;\n  }\n\n  try {\n    UI.showProgress('Processing List', 'Validating data...');\n\n    const nameConfig = getNameConfiguration();\n    const idConfig = getIdConfiguration();\n\n    // Validate ID configuration if using column-based IDs\n    if (idConfig.source === 'column') {\n      const validation = validateColumnIds(pendingCSVData.data, idConfig.column);\n      if (!validation.isValid) {\n        UI.hideProgress();\n        UI.showToast(`ID validation failed: ${validation.error}`, 'error');\n        return;\n      }\n    }\n\n    UI.updateProgress(25, 'Creating list structure...');\n\n    const listId = UI.generateId();\n    const listData = {\n      listId: listId,\n      metadata: {\n        listId: listId,\n        name: pendingCSVData.listName,\n        timestamp: Date.now(),\n        originalFilename: pendingCSVData.fileName,\n        entryCount: pendingCSVData.data.length,\n        nameConfig: nameConfig,\n        idConfig: idConfig\n      },\n      entries: pendingCSVData.data.map((row, index) => ({\n        id: generateEntryId(row, index, idConfig),\n        index: index,\n        data: row\n      }))\n    };\n\n    UI.updateProgress(50, 'Saving locally...');\n    \n    // Save list (handles sharding automatically for large lists)\n    await Database.saveToStore('lists', listData, {\n      onProgress: (progress, message) => {\n        UI.updateProgress(50 + (progress * 0.4), message); // Scale progress to 50-90%\n      }\n    });\n    \n    UI.updateProgress(100, 'Complete! Syncing to cloud in background...');\n    \n    // Hide progress after a short delay to show completion\n    setTimeout(() => {\n      UI.hideProgress();\n    }, 1000);\n\n    const entriesText = pendingCSVData.data.length > 1000 ? \n      `${pendingCSVData.data.length} entries (auto-sharded for optimal performance)` :\n      `${pendingCSVData.data.length} entries`;\n      \n    UI.showToast(`List \"${pendingCSVData.listName}\" processed successfully with ${entriesText}! üì¶ Syncing to cloud...`, 'success');\n\n    // Clear form and hide preview\n    document.getElementById('listName').value = '';\n    document.getElementById('csvFile').value = '';\n    handleCancelUpload();\n\n    pendingCSVData = null;\n\n    // Refresh displays\n    await Lists.loadLists();\n    await UI.populateQuickSelects();\n\n  } catch (error) {\n    UI.hideProgress();\n    console.error('Error confirming upload:', error);\n    UI.showToast('Error uploading list: ' + error.message, 'error');\n  }\n}\n\nfunction getNameConfiguration() {\n  const nameTemplateInput = document.getElementById('nameTemplate');\n  return nameTemplateInput.value.trim();\n}\n\nfunction getIdConfiguration() {\n  const autoGenerateId = document.getElementById('autoGenerateId');\n  const useColumnId = document.getElementById('useColumnId');\n  const idColumnSelect = document.getElementById('idColumnSelect');\n\n  if (useColumnId.checked) {\n    const selectedColumn = idColumnSelect.value;\n    if (!selectedColumn) {\n      throw new Error('Please select a column for record IDs');\n    }\n    return {\n      source: 'column',\n      column: selectedColumn\n    };\n  } else {\n    return {\n      source: 'auto'\n    };\n  }\n}\n\nfunction validateColumnIds(data, columnName) {\n  const ids = [];\n  const duplicates = [];\n  const emptyValues = [];\n\n  for (let i = 0; i < data.length; i++) {\n    const value = data[i][columnName];\n    const rowNum = i + 1;\n\n    // Check for empty values\n    if (!value || value.toString().trim() === '') {\n      emptyValues.push(rowNum);\n      continue;\n    }\n\n    const trimmedValue = value.toString().trim();\n\n    // Check for duplicates\n    if (ids.includes(trimmedValue)) {\n      duplicates.push({\n        value: trimmedValue,\n        row: rowNum\n      });\n    } else {\n      ids.push(trimmedValue);\n    }\n  }\n\n  if (emptyValues.length > 0) {\n    return {\n      isValid: false,\n      error: `Empty ID values found in rows: ${emptyValues.slice(0, 5).join(', ')}${emptyValues.length > 5 ? ` and ${emptyValues.length - 5} more` : ''}`\n    };\n  }\n\n  if (duplicates.length > 0) {\n    const duplicateList = duplicates.slice(0, 3).map(d => `\"${d.value}\" (row ${d.row})`).join(', ');\n    return {\n      isValid: false,\n      error: `Duplicate ID values found: ${duplicateList}${duplicates.length > 3 ? ` and ${duplicates.length - 3} more` : ''}`\n    };\n  }\n\n  return {\n    isValid: true\n  };\n}\n\nfunction generateEntryId(row, index, idConfig) {\n  if (idConfig.source === 'column') {\n    const value = row[idConfig.column];\n    return value ? value.toString().trim() : UI.generateId();\n  } else {\n    return UI.generateId();\n  }\n}\n\nfunction handleCancelUpload() {\n  document.getElementById('dataPreviewCard').style.display = 'none';\n  document.getElementById('nameConfigCard').style.display = 'none';\n  pendingCSVData = null;\n  UI.showToast('Upload cancelled', 'info');\n}\n\nexport const CSVParser = {\n  parseCSV,\n  handleCSVUpload,\n  handleConfirmUpload,\n  handleCancelUpload\n};\n\nwindow.CSVParser = CSVParser;","// ================================\n// EXPORT FUNCTIONALITY\n// ================================\n\nimport { Database } from './firestore-service.js';\nimport { UI } from './ui.js';\nimport { Settings } from './settings.js';\n\nasync function handleExportWinners() {\n  try {\n    const allWinners = await Database.getFromStore('winners');\n    const lists = await Database.getFromStore('lists');\n    \n    if (allWinners.length === 0) {\n      UI.showToast('No winners to export', 'warning');\n      return;\n    }\n\n    // Create a map of listId to listName for consistent filtering\n    const listNameMap = {};\n    lists.forEach(list => {\n      const listId = list.listId || list.metadata.listId;\n      listNameMap[listId] = list.metadata.name;\n    });\n\n    // Get current filter values to apply the same filtering as the table\n    const filterPrize = document.getElementById('filterPrize').value;\n    const filterList = document.getElementById('filterList').value;\n    const filterSelection = document.getElementById('filterSelection').value;\n\n    // Apply the same filters as the loadWinners function\n    const filteredWinners = allWinners.filter(winner => {\n      const prizeMatch = !filterPrize || winner.prize === filterPrize;\n      const listName = listNameMap[winner.listId] || 'Unknown';\n      const listMatch = !filterList || listName === filterList;\n      const selectionMatch = !filterSelection || winner.historyId === filterSelection;\n      return prizeMatch && listMatch && selectionMatch;\n    });\n\n    if (filteredWinners.length === 0) {\n      UI.showToast('No winners match the current filters to export', 'warning');\n      return;\n    }\n\n    // Generate unique 5-character IDs for winners that don't have them\n    const winnersWithIds = filteredWinners.map(winner => ({\n      ...winner,\n      uniqueId: winner.uniqueId || UI.generateId(5).toUpperCase()\n    }));\n\n    // Update winners with unique IDs if they didn't have them\n    for (const winner of winnersWithIds) {\n      if (!winner.uniqueId || winner.winnerId === winner.uniqueId) {\n        winner.uniqueId = UI.generateId(5).toUpperCase();\n        await Database.saveToStore('winners', winner);\n        // No Firebase sync here, as this is a local update for export purposes\n      }\n    }\n\n    // Create CSV content\n    const headers = ['UniqueID', 'Name', 'Prize', 'Timestamp', 'ListName'];\n    \n    // Add all original record fields as headers\n    const allFields = new Set();\n    winnersWithIds.forEach(winner => {\n      if (winner.originalEntry && winner.originalEntry.data) {\n        Object.keys(winner.originalEntry.data).forEach(field => allFields.add(field));\n      }\n    });\n    \n    const fieldHeaders = Array.from(allFields);\n    const allHeaders = [...headers, ...fieldHeaders];\n\n    const csvContent = [\n      allHeaders.join(','),\n      ...winnersWithIds.map(winner => {\n        const baseData = [\n          winner.uniqueId || winner.winnerId,\n          `\"${winner.displayName || 'Unknown'}\"`,\n          `\"${winner.prize || 'Unknown'}\"`,\n          new Date(winner.timestamp).toISOString(),\n          `\"${listNameMap[winner.listId] || 'Unknown'}\"`\n        ];\n\n        const fieldData = fieldHeaders.map(field => {\n          const value = winner.originalEntry?.data?.[field] || '';\n          return `\"${value}\"`;\n        });\n\n        return [...baseData, ...fieldData].join(',');\n      })\n    ].join('\\n');\n\n    // Create and download file\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `winner-app-export-${new Date().toISOString().split('T')[0]}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    // Show appropriate message based on filtering status\n    const activeFilters = [filterPrize, filterList, filterSelection].filter(f => f).length;\n    const message = activeFilters > 0 \n      ? `Exported ${filteredWinners.length} filtered winners to CSV (${allWinners.length} total)`\n      : `Exported ${filteredWinners.length} winners to CSV`;\n    \n    UI.showToast(message, 'success');\n\n  } catch (error) {\n    console.error('Error exporting winners:', error);\n    UI.showToast('Error exporting winners: ' + error.message, 'error');\n  }\n}\n\nasync function handleBackupData() {\n  try {\n    UI.showProgress('Creating Backup', 'Collecting data...');\n\n    const backupData = {\n      version: '1.0',\n      timestamp: Date.now(),\n      lists: await Database.getFromStore('lists'),\n      prizes: await Database.getFromStore('prizes'),\n      winners: await Database.getFromStore('winners'),\n      history: await Database.getFromStore('history'),\n      settings: Settings.settings // Use imported Settings\n    };\n\n    const dataStr = JSON.stringify(backupData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n\n    const url = URL.createObjectURL(dataBlob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `winner-app-backup-${new Date().toISOString().split('T')[0]}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n\n    UI.hideProgress();\n    UI.showToast('Backup created successfully', 'success');\n\n  } catch (error) {\n    UI.hideProgress();\n    console.error('Error creating backup:', error);\n    UI.showToast('Error creating backup: ' + error.message, 'error');\n  }\n}\n\nfunction handleRestoreData() {\n  const input = document.getElementById('restoreFileInput');\n  if (input) {\n    input.click();\n    input.onchange = processRestoreFile;\n  }\n}\n\nasync function processRestoreFile(event) {\n  const file = event.target.files[0];\n  if (!file) return;\n\n  try {\n    UI.showProgress('Restoring Data', 'Reading backup file...');\n\n    const jsonText = await UI.readFileAsText(file);\n    const backupData = JSON.parse(jsonText);\n\n    if (!backupData.version) {\n      throw new Error('Invalid backup file format');\n    }\n\n    UI.updateProgress(25, 'Restoring lists...');\n    if (backupData.lists) {\n      for (const list of backupData.lists) {\n        await Database.saveToStore('lists', list);\n      }\n    }\n\n    UI.updateProgress(50, 'Restoring prizes...');\n    if (backupData.prizes) {\n      for (const prize of backupData.prizes) {\n        await Database.saveToStore('prizes', prize);\n      }\n    }\n\n    UI.updateProgress(75, 'Restoring winners and history...');\n    if (backupData.winners) {\n      for (const winner of backupData.winners) {\n        await Database.saveToStore('winners', winner);\n      }\n    }\n\n    if (backupData.history) {\n      for (const historyEntry of backupData.history) {\n        await Database.saveToStore('history', historyEntry);\n      }\n    }\n\n    if (backupData.settings) {\n      Settings.updateSettings(backupData.settings); // Use imported Settings\n      await Settings.saveSettings();\n      // Settings.saveSettings already queues for sync, so no need to queue here again\n      Settings.applyTheme();\n      Settings.loadSettingsToForm();\n    }\n\n    UI.updateProgress(100, 'Finalizing...');\n\n    setTimeout(async () => {\n      UI.hideProgress();\n      UI.showToast('Data restored successfully', 'success');\n\n      // This needs to be handled by app.js or a central orchestrator\n      // await initializeApp(); \n      // For now, we'll just reload the page to ensure full UI refresh\n      location.reload();\n    }, 500);\n\n  } catch (error) {\n    UI.hideProgress();\n    console.error('Error restoring data:', error);\n    UI.showToast('Error restoring data: ' + error.message, 'error');\n  }\n\n  // Clear the input\n  event.target.value = '';\n}\n\nexport const Export = {\n  handleExportWinners,\n  handleBackupData,\n  handleRestoreData,\n  processRestoreFile\n};\n\nwindow.Export = Export;","// ================================\n// MAIN APPLICATION LOGIC\n// ================================\n\nimport { Database } from './modules/firestore-service.js';\nimport { Settings, settings } from './modules/settings.js';\nimport { UI } from './modules/ui.js';\nimport { Lists } from './modules/lists.js';\nimport { Prizes } from './modules/prizes.js';\nimport { Winners } from './modules/winners.js';\nimport { Selection } from './modules/selection.js';\nimport { CSVParser } from './modules/csv-parser.js';\nimport { Export } from './modules/export.js';\n\n// Global state variables (now truly central)\nexport let appModal = null;\nlet _currentList = null; // Internal variable\nlet _lastAction = null; // Internal variable\n\n// Export functions to get/set these central state variables\nexport function setCurrentList(list) {\n  _currentList = list;\n}\n\nexport function getCurrentList() {\n  return _currentList;\n}\n\nexport function setLastAction(action) {\n  _lastAction = action;\n}\n\nexport function getLastAction() {\n  return _lastAction;\n}\n\n// Load data in background without blocking UI\nfunction loadDataInBackground() {\n  // Fire and forget - don't await these\n  Lists.loadLists();\n  Prizes.loadPrizes();\n  UI.syncUI();\n}\n\n// Application initialization\nexport async function initializeApp() {\n  try {\n    await Database.initDB();\n    \n    // Load settings in background too - don't block UI\n    Settings.loadSettings().then(() => {\n      Settings.setupTheme(); // Apply theme once settings are loaded\n    });\n    \n    // Start loading everything in background, don't block UI\n    loadDataInBackground();\n    \n    // Load other data in background too (don't await)\n    Winners.loadWinners();\n    loadHistory();\n    updateHistoryStats();\n\n    // Initialize modal after everything else is ready\n    setTimeout(() => {\n      const modalElement = document.getElementById('appModal');\n      if (modalElement) {\n        appModal = new bootstrap.Modal(modalElement);\n        // No need to assign to window.appModal here, as it's exported\n      }\n    }, 100);\n\n    setupEventListeners();\n    Settings.setupTheme();\n\n    // Firestore handles sync automatically with offline persistence\n\n  } catch (error) {\n    console.error('Initialization error:', error);\n    UI.showToast('Failed to initialize application: ' + error.message, 'error');\n  }\n}\n\n// Event Listeners Setup\nfunction setupEventListeners() {\n  setupInterfaceToggles();\n  setupQuickSelection();\n  setupManagementListeners();\n  setupWinnerFilters();\n  setupDisplayMode();\n}\n\nfunction setupInterfaceToggles() {\n  const managementToggle = document.getElementById('managementToggle');\n  const backToPublicBtn = document.getElementById('backToPublicBtn');\n  const fullscreenToggle = document.getElementById('fullscreenToggle');\n\n  if (managementToggle) {\n    managementToggle.addEventListener('click', function () {\n      document.getElementById('publicInterface').style.display = 'none';\n      document.getElementById('managementInterface').classList.add('active');\n    });\n  }\n\n  if (backToPublicBtn) {\n    backToPublicBtn.addEventListener('click', function () {\n      document.getElementById('managementInterface').classList.remove('active');\n      document.getElementById('publicInterface').style.display = 'flex';\n    });\n  }\n\n  if (fullscreenToggle) {\n    fullscreenToggle.addEventListener('click', function () {\n      if (!document.fullscreenElement) {\n        document.documentElement.requestFullscreen();\n        fullscreenToggle.innerHTML = '<i class=\"bi bi-fullscreen-exit\"></i>';\n      } else {\n        document.exitFullscreen();\n        fullscreenToggle.innerHTML = '<i class=\"bi bi-fullscreen\"></i>';\n      }\n    });\n  }\n}\n\nfunction setupQuickSelection() {\n  const quickListSelect = document.getElementById('quickListSelect');\n  const quickPrizeSelect = document.getElementById('quickPrizeSelect');\n  const quickWinnersCount = document.getElementById('quickWinnersCount');\n  const bigPlayButton = document.getElementById('bigPlayButton');\n  const newSelectionBtn = document.getElementById('newSelectionBtn');\n  const undoSelectionBtn = document.getElementById('undoSelectionBtn');\n\n  if (quickListSelect) quickListSelect.addEventListener('change', UI.updateSelectionInfo);\n  if (quickPrizeSelect) quickPrizeSelect.addEventListener('change', UI.updateSelectionInfo);\n  if (quickWinnersCount) quickWinnersCount.addEventListener('input', UI.updateSelectionInfo);\n  if (bigPlayButton) bigPlayButton.addEventListener('click', Selection.handleBigPlayClick);\n  if (newSelectionBtn) newSelectionBtn.addEventListener('click', Winners.resetToSelectionMode);\n  if (undoSelectionBtn) undoSelectionBtn.addEventListener('click', Winners.undoLastSelection);\n}\n\nfunction setupManagementListeners() {\n  // CSV Upload\n  const uploadBtn = document.getElementById('uploadBtn');\n  const csvFileInput = document.getElementById('csvFile');\n  const confirmUpload = document.getElementById('confirmUpload');\n  const cancelUpload = document.getElementById('cancelUpload');\n\n  if (uploadBtn) {\n    uploadBtn.addEventListener('click', () => csvFileInput.click());\n  }\n  if (csvFileInput) {\n    csvFileInput.addEventListener('change', CSVParser.handleCSVUpload);\n  }\n  if (confirmUpload) confirmUpload.addEventListener('click', CSVParser.handleConfirmUpload);\n  if (cancelUpload) cancelUpload.addEventListener('click', CSVParser.handleCancelUpload);\n\n  // Prize Management\n  const addPrizeBtn = document.getElementById('addPrizeBtn');\n  if (addPrizeBtn) addPrizeBtn.addEventListener('click', Prizes.handleAddPrize);\n\n  // Settings\n  const saveSettingsBtn = document.getElementById('saveSettingsBtn');\n  if (saveSettingsBtn) saveSettingsBtn.addEventListener('click', Settings.handleSaveSettings);\n\n  // Theme\n  const themeToggle = document.getElementById('themeToggle');\n  if (themeToggle) themeToggle.addEventListener('click', Settings.toggleTheme);\n\n  const themePresets = document.querySelectorAll('.theme-preset');\n  themePresets.forEach(button => {\n    button.addEventListener('click', Settings.handleThemePreset);\n  });\n\n  // Export/Import\n  const exportWinnersBtn = document.getElementById('exportWinnersBtn');\n  const clearWinnersBtn = document.getElementById('clearWinnersBtn');\n  const backupData = document.getElementById('backupData');\n  const restoreData = document.getElementById('restoreData');\n\n  if (exportWinnersBtn) exportWinnersBtn.addEventListener('click', Export.handleExportWinners);\n  if (clearWinnersBtn) clearWinnersBtn.addEventListener('click', Winners.clearAllWinners);\n  if (backupData) backupData.addEventListener('click', Export.handleBackupData);\n  if (restoreData) restoreData.addEventListener('click', Export.handleRestoreData);\n}\n\nfunction setupWinnerFilters() {\n  const prizeFilter = document.getElementById('filterPrize');\n  const listFilter = document.getElementById('filterList');\n  const selectionFilter = document.getElementById('filterSelection');\n\n  if (prizeFilter) prizeFilter.addEventListener('change', Winners.loadWinners);\n  if (listFilter) listFilter.addEventListener('change', Winners.loadWinners);\n  if (selectionFilter) selectionFilter.addEventListener('change', Winners.loadWinners);\n}\n\nfunction setupDisplayMode() {\n  const displayModeSelect = document.getElementById('displayMode');\n  if (displayModeSelect) {\n    const durationSettings = document.getElementById('durationSettings');\n    const countdownSettings = document.getElementById('countdownSettings');\n\n    const toggleDisplaySettings = () => {\n      const mode = displayModeSelect.value;\n      const showSequential = mode === 'sequential';\n      const showCountdown = mode === 'countdown' || mode === 'animation';\n\n      if (durationSettings) durationSettings.style.display = showSequential ? 'block' : 'none';\n      if (countdownSettings) countdownSettings.style.display = showCountdown ? 'block' : 'none';\n    };\n\n    displayModeSelect.addEventListener('change', toggleDisplaySettings);\n    toggleDisplaySettings(); // Initial check\n  }\n}\n\n// History Management (simplified for now)\nexport async function loadHistory() {\n  try {\n    const history = await Database.getFromStore('history');\n    const tbody = document.getElementById('historyTableBody');\n\n    if (!tbody) return;\n\n    if (history.length === 0) {\n      tbody.innerHTML = '<tr><td colspan=\"6\" class=\"text-center text-muted\">No selection history yet.</td></tr>';\n      return;\n    }\n\n    // Sort by timestamp descending\n    history.sort((a, b) => b.timestamp - a.timestamp);\n\n    tbody.innerHTML = history.map(entry => `\n      <tr>\n        <td>${new Date(entry.timestamp).toLocaleDateString()}</td>\n        <td>${entry.listName || 'Unknown'}</td>\n        <td>${entry.prize}</td>\n        <td>${entry.winners.length}</td>\n        <td>${entry.winners.map(w => w.displayName).join(', ')}</td>\n        <td>\n          <button class=\"btn btn-sm btn-outline-danger\" data-history-id=\"${entry.historyId}\" onclick=\"deleteHistoryConfirm(this.dataset.historyId)\">\n            <i class=\"bi bi-trash\"></i>\n          </button>\n        </td>\n      </tr>\n    `).join('');\n  } catch (error) {\n    console.error('Error loading history:', error);\n    UI.showToast('Error loading history: ' + error.message, 'error');\n  }\n}\n\nexport async function updateHistoryStats() {\n  try {\n    const history = await Database.getFromStore('history');\n    const winners = await Winners.getAllWinners();\n\n    const totalSelections = history.length;\n    const totalWinners = winners.length;\n    const averageWinners = totalSelections > 0 ? Math.round(totalWinners / totalSelections * 10) / 10 : 0;\n\n    // Find most used prize\n    const prizeCount = {};\n    history.forEach(entry => {\n      prizeCount[entry.prize] = (prizeCount[entry.prize] || 0) + 1;\n    });\n\n    const mostUsedPrize = Object.keys(prizeCount).reduce((a, b) =>\n      prizeCount[a] > prizeCount[b] ? a : b, '-'\n    );\n\n    // Update displays\n    const statsElements = {\n      'totalSelections': totalSelections,\n      'totalWinners': totalWinners,\n      'averageWinners': averageWinners,\n      'mostUsedPrize': mostUsedPrize\n    };\n\n    for (const [id, value] of Object.entries(statsElements)) {\n      const element = document.getElementById(id);\n      if (element) {\n        element.textContent = value;\n      }\n    }\n\n  } catch (error) {\n    console.error('Error updating history stats:', error);\n  }\n}\n\nexport async function deleteHistoryConfirm(historyId) {\n  UI.showConfirmationModal('Delete History Entry', 'Are you sure you want to delete this history entry?', async () => {\n    try {\n      await Database.deleteFromStore('history', historyId);\n      UI.showToast('History entry deleted successfully', 'success');\n      await loadHistory();\n      await updateHistoryStats();\n    } catch (error) {\n      console.error('Error deleting history entry:', error);\n      UI.showToast('Error deleting history entry: ' + error.message, 'error');\n    }\n  });\n}\n","import { initializeApp, loadHistory, updateHistoryStats, appModal, setCurrentList, setLastAction } from './js/app.js';\nimport { UI } from './js/modules/ui.js';\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', async function () {\n  try {\n    // Initialize database and load settings are now handled within initializeApp\n    \n    // Initialize the app\n    await initializeApp();\n    \n    // Setup event listeners (these are still in app.js for now)\n    // setupEventListeners(); // This function is internal to app.js\n    \n    // Setup theme (this is still in app.js for now)\n    // Settings.setupTheme(); // This function is internal to app.js\n    \n    // Initialize modal after everything else is ready\n    // appModal is exported from app.js, so it will be available after app.js runs its DOMContentLoaded\n    // We need to ensure appModal is initialized before other modules try to use it.\n    // For now, we'll keep the setTimeout here, but ideally, appModal would be initialized\n    // as part of the UI module or passed around.\n    setTimeout(() => {\n      const modalElement = document.getElementById('appModal');\n      if (modalElement) {\n        // appModal is already exported from app.js, so we just need to ensure it's set up\n        // and potentially assign it to window.appModal for legacy inline onclicks.\n        // The actual new bootstrap.Modal(modalElement) call should happen in app.js's initializeApp or UI.js\n        // For now, we'll assume app.js handles the bootstrap.Modal initialization.\n        window.appModal = appModal; // Keep for now for inline onclicks\n      }\n    }, 100);\n    \n    UI.showToast('Application loaded successfully!', 'success');\n  } catch (error) {\n    console.error('Initialization error:', error);\n    UI.showToast('Failed to initialize application: ' + error.message, 'error');\n  }\n});\n\n// Service Worker Registration\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', () => {\n    navigator.serviceWorker.register('/worker.js') // Path relative to server root (public/worker.js)\n      .then((registration) => {\n        console.log('SW registered: ', registration);\n      })\n      .catch((registrationError) => {\n        console.log('SW registration failed: ', registrationError);\n      });\n  });\n}\n"],"names":["firebaseConfig","app","initializeApp","db","getFirestore","enableIndexedDbPersistence","err","getKeyField","collectionName","saveToStore","data","options","keyField","docId","handleLargeListSharding","docRef","doc","setDoc","error","listData","onProgress","entries","maxEntriesPerShard","baseListId","totalShards","shardIds","shardIndex","startIndex","endIndex","shardEntries","shardId","shardData","progress","resolve","mainListData","mainDocRef","getListWithShards","listId","docSnap","getDoc","mainList","allEntries","shardDocRef","shardSnap","shard","getFromStore","key","cacheSnapshot","getDocsFromCache","collection","cacheResults","getDocs","serverSnapshot","reconstructShardedLists","querySnapshot","results","rawDocuments","reconstructedLists","processedIds","d","cachedSnap","getDocFromCache","deleteFromStore","deleteDoc","listenToCollection","callback","collRef","onSnapshot","snapshot","items","queryStore","filters","q","filter","query","where","orderBy","Database","generateId","length","chars","result","i","showToast","message","type","backgroundColor","showProgress","title","text","updateProgress","percentage","hideProgress","showConfirmationModal","onConfirm","modalTitle","modalBody","confirmBtn","cancelBtn","newConfirmBtn","readFileAsText","file","reject","reader","e","populateQuickSelects","lists","prizes","listsData","prizesData","quickListSelect","quickPrizeSelect","quickWinnersCount","list","option","settings","prize","updateSelectionInfo","applyVisibilitySettings","totalEntriesCard","syncUI","listOption","prizeOption","listText","prizeText","updateTotalEntries","bigPlayButton","UI","saveSettings","value","settingToSave","loadSettings","savedSettings","setting","handleSaveSettings","settingsForm","selectionState","applyTheme","setupTheme","loadSettingsToForm","root","gradient","settingsFields","fieldId","element","toggleTheme","body","themeToggle","handleThemePreset","event","theme","config","Settings","newSettings","loadLists","container","source","loadListsTraditional","viewList","entriesPreview","entry","formatDisplayName","deleteListConfirm","nameConfig","match","displayName","delimiter","commonFields","field","firstField","Lists","loadPrizes","handleAddPrize","prizeNameInput","prizeQuantityInput","prizeDescriptionInput","name","quantity","description","prizeId","editPrize","p","newName","newQuantity","newDescription","deletePrizeConfirm","Prizes","loadWinners","winners","tbody","listNameMap","filterPrize","filterList","filterSelection","populateWinnerFilters","filteredWinners","winner","prizeMatch","listName","listMatch","selectionMatch","updateWinnersCountDisplay","selectedPrize","selectedList","selectedSelection","prizeFilter","listFilter","selectionFilter","w","listNames","selections","count","selectionEntries","id","winnersInSelection","timestamp","a","b","filteredCount","totalCount","winnersCountElement","filterStatusElement","activeFilters","deleteWinnerConfirm","winnerId","loadHistory","saveWinner","getAllWinners","clearAllWinners","deletedCount","undoLastSelection","currentLastAction","getLastAction","currentList","getCurrentList","resetToSelectionMode","setLastAction","Winners","animationFrameId","startSwirlAnimation","canvas","hexToRgb","hex","startParticleAnimation","ctx","particles","primaryRgb","secondaryRgb","SimpleParticle","animate","particle","stopAnimation","Animations","createRandomWorker","workerCode","blob","handleBigPlayClick","winnersCount","displayMode","setCurrentList","showCountdown","selectWinners","postCountdownDisplayMode","countdownOverlay","countdownNumber","interval","playSound","numWinners","randomWorker","selectedEntries","historyId","index","historyEntry","updatedList","selected","displayWinnersPublicly","prizeDisplay","winnersGrid","displayWinnersSequentially","displayAllWinnersAtOnce","winnerCard","createWinnerCard","displayDuration","delay","getWinnerDetails","details","fieldsToShow","audioContext","playBeep","playChord","frequency","duration","oscillator","gainNode","frequencies","freq","Selection","pendingCSVData","parseCSV","csvText","lines","line","headers","parseCSVLine","errors","values","row","header","current","inQuotes","char","nextChar","handleCSVUpload","listNameInput","csvFile","fileName","showCSVPreview","previewCard","previewHeaders","previewBody","previewData","previewTitle","showNameConfiguration","firstRow","nameConfigCard","availableFields","nameTemplateInput","namePreview","idColumnSelect","columnIdSection","autoGenerateId","useColumnId","fieldBtn","cursorPos","placeholder","updatePreview","defaultTemplate","previewText","toggleIdSection","handleConfirmUpload","getNameConfiguration","idConfig","getIdConfiguration","validation","validateColumnIds","generateEntryId","entriesText","handleCancelUpload","selectedColumn","columnName","ids","duplicates","emptyValues","rowNum","trimmedValue","CSVParser","handleExportWinners","allWinners","winnersWithIds","allFields","fieldHeaders","csvContent","baseData","fieldData","url","f","handleBackupData","backupData","dataStr","dataBlob","handleRestoreData","input","processRestoreFile","jsonText","Export","appModal","_currentList","_lastAction","action","loadDataInBackground","updateHistoryStats","modalElement","setupEventListeners","setupInterfaceToggles","setupQuickSelection","setupManagementListeners","setupWinnerFilters","setupDisplayMode","managementToggle","backToPublicBtn","fullscreenToggle","newSelectionBtn","undoSelectionBtn","uploadBtn","csvFileInput","confirmUpload","cancelUpload","addPrizeBtn","saveSettingsBtn","button","exportWinnersBtn","clearWinnersBtn","restoreData","displayModeSelect","durationSettings","countdownSettings","toggleDisplaySettings","mode","showSequential","history","totalSelections","totalWinners","averageWinners","prizeCount","mostUsedPrize","statsElements","registration","registrationError"],"mappings":"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"}